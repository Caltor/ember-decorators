{
  "type": "File",
  "start": 0,
  "end": 23150,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 704,
      "column": 0
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 23150,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 704,
        "column": 0
      }
    },
    "sourceType": "module",
    "body": [
      {
        "type": "ImportDeclaration",
        "start": 0,
        "end": 26,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 26
          }
        },
        "specifiers": [
          {
            "type": "ImportDefaultSpecifier",
            "start": 7,
            "end": 12,
            "loc": {
              "start": {
                "line": 1,
                "column": 7
              },
              "end": {
                "line": 1,
                "column": 12
              }
            },
            "local": {
              "type": "Identifier",
              "start": 7,
              "end": 12,
              "loc": {
                "start": {
                  "line": 1,
                  "column": 7
                },
                "end": {
                  "line": 1,
                  "column": 12
                },
                "identifierName": "Ember"
              },
              "name": "Ember"
            }
          }
        ],
        "source": {
          "type": "StringLiteral",
          "start": 18,
          "end": 25,
          "loc": {
            "start": {
              "line": 1,
              "column": 18
            },
            "end": {
              "line": 1,
              "column": 25
            }
          },
          "extra": {
            "rawValue": "ember",
            "raw": "'ember'"
          },
          "value": "ember"
        }
      },
      {
        "type": "ImportDeclaration",
        "start": 28,
        "end": 110,
        "loc": {
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 35
          }
        },
        "specifiers": [
          {
            "type": "ImportSpecifier",
            "start": 39,
            "end": 74,
            "loc": {
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 37
              }
            },
            "imported": {
              "type": "Identifier",
              "start": 39,
              "end": 74,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 2
                },
                "end": {
                  "line": 4,
                  "column": 37
                },
                "identifierName": "decoratedPropertyWithRequiredParams"
              },
              "name": "decoratedPropertyWithRequiredParams"
            },
            "local": {
              "type": "Identifier",
              "start": 39,
              "end": 74,
              "loc": {
                "start": {
                  "line": 4,
                  "column": 2
                },
                "end": {
                  "line": 4,
                  "column": 37
                },
                "identifierName": "decoratedPropertyWithRequiredParams"
              },
              "name": "decoratedPropertyWithRequiredParams"
            }
          }
        ],
        "source": {
          "type": "StringLiteral",
          "start": 82,
          "end": 109,
          "loc": {
            "start": {
              "line": 5,
              "column": 7
            },
            "end": {
              "line": 5,
              "column": 34
            }
          },
          "extra": {
            "rawValue": "../utils/decorator-macros",
            "raw": "'../utils/decorator-macros'"
          },
          "value": "../utils/decorator-macros"
        },
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.alias](http://emberjs.com/api/classes/Ember.computed.html#method_alias)\n *\n * Creates a new property that is an alias for another property on an object.\n * Calls to get or set this property behave as though they were called on\n * the original property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { alias } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @alias('person.first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the aliased property\n ",
            "start": 112,
            "end": 739,
            "loc": {
              "start": {
                "line": 7,
                "column": 0
              },
              "end": {
                "line": 29,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 740,
        "end": 860,
        "loc": {
          "start": {
            "line": 30,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 120
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 747,
          "end": 860,
          "loc": {
            "start": {
              "line": 30,
              "column": 7
            },
            "end": {
              "line": 30,
              "column": 120
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 753,
              "end": 859,
              "loc": {
                "start": {
                  "line": 30,
                  "column": 13
                },
                "end": {
                  "line": 30,
                  "column": 119
                }
              },
              "id": {
                "type": "Identifier",
                "start": 753,
                "end": 758,
                "loc": {
                  "start": {
                    "line": 30,
                    "column": 13
                  },
                  "end": {
                    "line": 30,
                    "column": 18
                  },
                  "identifierName": "alias"
                },
                "name": "alias",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 761,
                "end": 859,
                "loc": {
                  "start": {
                    "line": 30,
                    "column": 21
                  },
                  "end": {
                    "line": 30,
                    "column": 119
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 761,
                  "end": 796,
                  "loc": {
                    "start": {
                      "line": 30,
                      "column": 21
                    },
                    "end": {
                      "line": 30,
                      "column": 56
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 797,
                    "end": 817,
                    "loc": {
                      "start": {
                        "line": 30,
                        "column": 57
                      },
                      "end": {
                        "line": 30,
                        "column": 77
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 797,
                      "end": 811,
                      "loc": {
                        "start": {
                          "line": 30,
                          "column": 57
                        },
                        "end": {
                          "line": 30,
                          "column": 71
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 797,
                        "end": 802,
                        "loc": {
                          "start": {
                            "line": 30,
                            "column": 57
                          },
                          "end": {
                            "line": 30,
                            "column": 62
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 803,
                        "end": 811,
                        "loc": {
                          "start": {
                            "line": 30,
                            "column": 63
                          },
                          "end": {
                            "line": 30,
                            "column": 71
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 812,
                      "end": 817,
                      "loc": {
                        "start": {
                          "line": 30,
                          "column": 72
                        },
                        "end": {
                          "line": 30,
                          "column": 77
                        },
                        "identifierName": "alias"
                      },
                      "name": "alias"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 819,
                    "end": 858,
                    "loc": {
                      "start": {
                        "line": 30,
                        "column": 79
                      },
                      "end": {
                        "line": 30,
                        "column": 118
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `alias` without parameters",
                      "raw": "'Cannot use `alias` without parameters'"
                    },
                    "value": "Cannot use `alias` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.alias](http://emberjs.com/api/classes/Ember.computed.html#method_alias)\n *\n * Creates a new property that is an alias for another property on an object.\n * Calls to get or set this property behave as though they were called on\n * the original property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { alias } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @alias('person.first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the aliased property\n ",
              "start": 112,
              "end": 739,
              "loc": {
                "start": {
                  "line": 7,
                  "column": 0
                },
                "end": {
                  "line": 29,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.and](http://emberjs.com/api/classes/Ember.computed.html#method_and)\n *\n * A computed property that performs a logical and on the original values\n * for the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { and } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @and('first', 'last') hasFullName // false\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for properties to `and`\n ",
              "start": 862,
              "end": 1435,
              "loc": {
                "start": {
                  "line": 32,
                  "column": 0
                },
                "end": {
                  "line": 53,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.alias](http://emberjs.com/api/classes/Ember.computed.html#method_alias)\n *\n * Creates a new property that is an alias for another property on an object.\n * Calls to get or set this property behave as though they were called on\n * the original property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { alias } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @alias('person.first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the aliased property\n ",
            "start": 112,
            "end": 739,
            "loc": {
              "start": {
                "line": 7,
                "column": 0
              },
              "end": {
                "line": 29,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.and](http://emberjs.com/api/classes/Ember.computed.html#method_and)\n *\n * A computed property that performs a logical and on the original values\n * for the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { and } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @and('first', 'last') hasFullName // false\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for properties to `and`\n ",
            "start": 862,
            "end": 1435,
            "loc": {
              "start": {
                "line": 32,
                "column": 0
              },
              "end": {
                "line": 53,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 1436,
        "end": 1550,
        "loc": {
          "start": {
            "line": 54,
            "column": 0
          },
          "end": {
            "line": 54,
            "column": 114
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 1443,
          "end": 1550,
          "loc": {
            "start": {
              "line": 54,
              "column": 7
            },
            "end": {
              "line": 54,
              "column": 114
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 1449,
              "end": 1549,
              "loc": {
                "start": {
                  "line": 54,
                  "column": 13
                },
                "end": {
                  "line": 54,
                  "column": 113
                }
              },
              "id": {
                "type": "Identifier",
                "start": 1449,
                "end": 1452,
                "loc": {
                  "start": {
                    "line": 54,
                    "column": 13
                  },
                  "end": {
                    "line": 54,
                    "column": 16
                  },
                  "identifierName": "and"
                },
                "name": "and",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 1455,
                "end": 1549,
                "loc": {
                  "start": {
                    "line": 54,
                    "column": 19
                  },
                  "end": {
                    "line": 54,
                    "column": 113
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 1455,
                  "end": 1490,
                  "loc": {
                    "start": {
                      "line": 54,
                      "column": 19
                    },
                    "end": {
                      "line": 54,
                      "column": 54
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 1491,
                    "end": 1509,
                    "loc": {
                      "start": {
                        "line": 54,
                        "column": 55
                      },
                      "end": {
                        "line": 54,
                        "column": 73
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 1491,
                      "end": 1505,
                      "loc": {
                        "start": {
                          "line": 54,
                          "column": 55
                        },
                        "end": {
                          "line": 54,
                          "column": 69
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 1491,
                        "end": 1496,
                        "loc": {
                          "start": {
                            "line": 54,
                            "column": 55
                          },
                          "end": {
                            "line": 54,
                            "column": 60
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 1497,
                        "end": 1505,
                        "loc": {
                          "start": {
                            "line": 54,
                            "column": 61
                          },
                          "end": {
                            "line": 54,
                            "column": 69
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 1506,
                      "end": 1509,
                      "loc": {
                        "start": {
                          "line": 54,
                          "column": 70
                        },
                        "end": {
                          "line": 54,
                          "column": 73
                        },
                        "identifierName": "and"
                      },
                      "name": "and"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 1511,
                    "end": 1548,
                    "loc": {
                      "start": {
                        "line": 54,
                        "column": 75
                      },
                      "end": {
                        "line": 54,
                        "column": 112
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `and` without parameters",
                      "raw": "'Cannot use `and` without parameters'"
                    },
                    "value": "Cannot use `and` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.and](http://emberjs.com/api/classes/Ember.computed.html#method_and)\n *\n * A computed property that performs a logical and on the original values\n * for the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { and } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @and('first', 'last') hasFullName // false\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for properties to `and`\n ",
              "start": 862,
              "end": 1435,
              "loc": {
                "start": {
                  "line": 32,
                  "column": 0
                },
                "end": {
                  "line": 53,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.bool](http://emberjs.com/api/classes/Ember.computed.html#method_bool)\n *\n * A computed property that converts the provided dependent property into a\n * boolean value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { bool } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   messageCount: 1,\n *\n *   @bool('messageCount') hasMessages // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to convert\n ",
              "start": 1552,
              "end": 2083,
              "loc": {
                "start": {
                  "line": 56,
                  "column": 0
                },
                "end": {
                  "line": 75,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.and](http://emberjs.com/api/classes/Ember.computed.html#method_and)\n *\n * A computed property that performs a logical and on the original values\n * for the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { and } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @and('first', 'last') hasFullName // false\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for properties to `and`\n ",
            "start": 862,
            "end": 1435,
            "loc": {
              "start": {
                "line": 32,
                "column": 0
              },
              "end": {
                "line": 53,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.bool](http://emberjs.com/api/classes/Ember.computed.html#method_bool)\n *\n * A computed property that converts the provided dependent property into a\n * boolean value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { bool } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   messageCount: 1,\n *\n *   @bool('messageCount') hasMessages // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to convert\n ",
            "start": 1552,
            "end": 2083,
            "loc": {
              "start": {
                "line": 56,
                "column": 0
              },
              "end": {
                "line": 75,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 2084,
        "end": 2201,
        "loc": {
          "start": {
            "line": 76,
            "column": 0
          },
          "end": {
            "line": 76,
            "column": 117
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 2091,
          "end": 2201,
          "loc": {
            "start": {
              "line": 76,
              "column": 7
            },
            "end": {
              "line": 76,
              "column": 117
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 2097,
              "end": 2200,
              "loc": {
                "start": {
                  "line": 76,
                  "column": 13
                },
                "end": {
                  "line": 76,
                  "column": 116
                }
              },
              "id": {
                "type": "Identifier",
                "start": 2097,
                "end": 2101,
                "loc": {
                  "start": {
                    "line": 76,
                    "column": 13
                  },
                  "end": {
                    "line": 76,
                    "column": 17
                  },
                  "identifierName": "bool"
                },
                "name": "bool",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 2104,
                "end": 2200,
                "loc": {
                  "start": {
                    "line": 76,
                    "column": 20
                  },
                  "end": {
                    "line": 76,
                    "column": 116
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 2104,
                  "end": 2139,
                  "loc": {
                    "start": {
                      "line": 76,
                      "column": 20
                    },
                    "end": {
                      "line": 76,
                      "column": 55
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 2140,
                    "end": 2159,
                    "loc": {
                      "start": {
                        "line": 76,
                        "column": 56
                      },
                      "end": {
                        "line": 76,
                        "column": 75
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 2140,
                      "end": 2154,
                      "loc": {
                        "start": {
                          "line": 76,
                          "column": 56
                        },
                        "end": {
                          "line": 76,
                          "column": 70
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 2140,
                        "end": 2145,
                        "loc": {
                          "start": {
                            "line": 76,
                            "column": 56
                          },
                          "end": {
                            "line": 76,
                            "column": 61
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 2146,
                        "end": 2154,
                        "loc": {
                          "start": {
                            "line": 76,
                            "column": 62
                          },
                          "end": {
                            "line": 76,
                            "column": 70
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 2155,
                      "end": 2159,
                      "loc": {
                        "start": {
                          "line": 76,
                          "column": 71
                        },
                        "end": {
                          "line": 76,
                          "column": 75
                        },
                        "identifierName": "bool"
                      },
                      "name": "bool"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 2161,
                    "end": 2199,
                    "loc": {
                      "start": {
                        "line": 76,
                        "column": 77
                      },
                      "end": {
                        "line": 76,
                        "column": 115
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `bool` without parameters",
                      "raw": "'Cannot use `bool` without parameters'"
                    },
                    "value": "Cannot use `bool` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.bool](http://emberjs.com/api/classes/Ember.computed.html#method_bool)\n *\n * A computed property that converts the provided dependent property into a\n * boolean value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { bool } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   messageCount: 1,\n *\n *   @bool('messageCount') hasMessages // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to convert\n ",
              "start": 1552,
              "end": 2083,
              "loc": {
                "start": {
                  "line": 56,
                  "column": 0
                },
                "end": {
                  "line": 75,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.collect](http://emberjs.com/api/classes/Ember.computed.html#method_collect)\n *\n * A computed property that returns the array of values for the provided\n * dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { collect } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   light: 'strobe',\n *   lens: '35mm prime',\n *\n *   @collect('light', 'lens') equipment // ['strobe', '35mm prime']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for the properties to collect\n ",
              "start": 2203,
              "end": 2801,
              "loc": {
                "start": {
                  "line": 78,
                  "column": 0
                },
                "end": {
                  "line": 98,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.bool](http://emberjs.com/api/classes/Ember.computed.html#method_bool)\n *\n * A computed property that converts the provided dependent property into a\n * boolean value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { bool } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   messageCount: 1,\n *\n *   @bool('messageCount') hasMessages // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to convert\n ",
            "start": 1552,
            "end": 2083,
            "loc": {
              "start": {
                "line": 56,
                "column": 0
              },
              "end": {
                "line": 75,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.collect](http://emberjs.com/api/classes/Ember.computed.html#method_collect)\n *\n * A computed property that returns the array of values for the provided\n * dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { collect } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   light: 'strobe',\n *   lens: '35mm prime',\n *\n *   @collect('light', 'lens') equipment // ['strobe', '35mm prime']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for the properties to collect\n ",
            "start": 2203,
            "end": 2801,
            "loc": {
              "start": {
                "line": 78,
                "column": 0
              },
              "end": {
                "line": 98,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 2802,
        "end": 2928,
        "loc": {
          "start": {
            "line": 99,
            "column": 0
          },
          "end": {
            "line": 99,
            "column": 126
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 2809,
          "end": 2928,
          "loc": {
            "start": {
              "line": 99,
              "column": 7
            },
            "end": {
              "line": 99,
              "column": 126
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 2815,
              "end": 2927,
              "loc": {
                "start": {
                  "line": 99,
                  "column": 13
                },
                "end": {
                  "line": 99,
                  "column": 125
                }
              },
              "id": {
                "type": "Identifier",
                "start": 2815,
                "end": 2822,
                "loc": {
                  "start": {
                    "line": 99,
                    "column": 13
                  },
                  "end": {
                    "line": 99,
                    "column": 20
                  },
                  "identifierName": "collect"
                },
                "name": "collect",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 2825,
                "end": 2927,
                "loc": {
                  "start": {
                    "line": 99,
                    "column": 23
                  },
                  "end": {
                    "line": 99,
                    "column": 125
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 2825,
                  "end": 2860,
                  "loc": {
                    "start": {
                      "line": 99,
                      "column": 23
                    },
                    "end": {
                      "line": 99,
                      "column": 58
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 2861,
                    "end": 2883,
                    "loc": {
                      "start": {
                        "line": 99,
                        "column": 59
                      },
                      "end": {
                        "line": 99,
                        "column": 81
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 2861,
                      "end": 2875,
                      "loc": {
                        "start": {
                          "line": 99,
                          "column": 59
                        },
                        "end": {
                          "line": 99,
                          "column": 73
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 2861,
                        "end": 2866,
                        "loc": {
                          "start": {
                            "line": 99,
                            "column": 59
                          },
                          "end": {
                            "line": 99,
                            "column": 64
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 2867,
                        "end": 2875,
                        "loc": {
                          "start": {
                            "line": 99,
                            "column": 65
                          },
                          "end": {
                            "line": 99,
                            "column": 73
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 2876,
                      "end": 2883,
                      "loc": {
                        "start": {
                          "line": 99,
                          "column": 74
                        },
                        "end": {
                          "line": 99,
                          "column": 81
                        },
                        "identifierName": "collect"
                      },
                      "name": "collect"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 2885,
                    "end": 2926,
                    "loc": {
                      "start": {
                        "line": 99,
                        "column": 83
                      },
                      "end": {
                        "line": 99,
                        "column": 124
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `collect` without parameters",
                      "raw": "'Cannot use `collect` without parameters'"
                    },
                    "value": "Cannot use `collect` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.collect](http://emberjs.com/api/classes/Ember.computed.html#method_collect)\n *\n * A computed property that returns the array of values for the provided\n * dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { collect } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   light: 'strobe',\n *   lens: '35mm prime',\n *\n *   @collect('light', 'lens') equipment // ['strobe', '35mm prime']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for the properties to collect\n ",
              "start": 2203,
              "end": 2801,
              "loc": {
                "start": {
                  "line": 78,
                  "column": 0
                },
                "end": {
                  "line": 98,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.empty](http://emberjs.com/api/classes/Ember.computed.html#method_empty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { empty } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   items: Ember.A(['taco', 'burrito']),\n *\n *   @empty('items') isEmpty // false\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the property to check emptiness of\n ",
              "start": 2930,
              "end": 3534,
              "loc": {
                "start": {
                  "line": 101,
                  "column": 0
                },
                "end": {
                  "line": 120,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.collect](http://emberjs.com/api/classes/Ember.computed.html#method_collect)\n *\n * A computed property that returns the array of values for the provided\n * dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { collect } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   light: 'strobe',\n *   lens: '35mm prime',\n *\n *   @collect('light', 'lens') equipment // ['strobe', '35mm prime']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for the properties to collect\n ",
            "start": 2203,
            "end": 2801,
            "loc": {
              "start": {
                "line": 78,
                "column": 0
              },
              "end": {
                "line": 98,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.empty](http://emberjs.com/api/classes/Ember.computed.html#method_empty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { empty } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   items: Ember.A(['taco', 'burrito']),\n *\n *   @empty('items') isEmpty // false\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the property to check emptiness of\n ",
            "start": 2930,
            "end": 3534,
            "loc": {
              "start": {
                "line": 101,
                "column": 0
              },
              "end": {
                "line": 120,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 3535,
        "end": 3655,
        "loc": {
          "start": {
            "line": 121,
            "column": 0
          },
          "end": {
            "line": 121,
            "column": 120
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 3542,
          "end": 3655,
          "loc": {
            "start": {
              "line": 121,
              "column": 7
            },
            "end": {
              "line": 121,
              "column": 120
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 3548,
              "end": 3654,
              "loc": {
                "start": {
                  "line": 121,
                  "column": 13
                },
                "end": {
                  "line": 121,
                  "column": 119
                }
              },
              "id": {
                "type": "Identifier",
                "start": 3548,
                "end": 3553,
                "loc": {
                  "start": {
                    "line": 121,
                    "column": 13
                  },
                  "end": {
                    "line": 121,
                    "column": 18
                  },
                  "identifierName": "empty"
                },
                "name": "empty",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 3556,
                "end": 3654,
                "loc": {
                  "start": {
                    "line": 121,
                    "column": 21
                  },
                  "end": {
                    "line": 121,
                    "column": 119
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 3556,
                  "end": 3591,
                  "loc": {
                    "start": {
                      "line": 121,
                      "column": 21
                    },
                    "end": {
                      "line": 121,
                      "column": 56
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 3592,
                    "end": 3612,
                    "loc": {
                      "start": {
                        "line": 121,
                        "column": 57
                      },
                      "end": {
                        "line": 121,
                        "column": 77
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 3592,
                      "end": 3606,
                      "loc": {
                        "start": {
                          "line": 121,
                          "column": 57
                        },
                        "end": {
                          "line": 121,
                          "column": 71
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 3592,
                        "end": 3597,
                        "loc": {
                          "start": {
                            "line": 121,
                            "column": 57
                          },
                          "end": {
                            "line": 121,
                            "column": 62
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 3598,
                        "end": 3606,
                        "loc": {
                          "start": {
                            "line": 121,
                            "column": 63
                          },
                          "end": {
                            "line": 121,
                            "column": 71
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 3607,
                      "end": 3612,
                      "loc": {
                        "start": {
                          "line": 121,
                          "column": 72
                        },
                        "end": {
                          "line": 121,
                          "column": 77
                        },
                        "identifierName": "empty"
                      },
                      "name": "empty"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 3614,
                    "end": 3653,
                    "loc": {
                      "start": {
                        "line": 121,
                        "column": 79
                      },
                      "end": {
                        "line": 121,
                        "column": 118
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `empty` without parameters",
                      "raw": "'Cannot use `empty` without parameters'"
                    },
                    "value": "Cannot use `empty` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.empty](http://emberjs.com/api/classes/Ember.computed.html#method_empty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { empty } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   items: Ember.A(['taco', 'burrito']),\n *\n *   @empty('items') isEmpty // false\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the property to check emptiness of\n ",
              "start": 2930,
              "end": 3534,
              "loc": {
                "start": {
                  "line": 101,
                  "column": 0
                },
                "end": {
                  "line": 120,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.equal](http://emberjs.com/api/classes/Ember.computed.html#method_equal)\n *\n * A computed property that returns true if the dependent properties are equal.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { equal } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   state: 'sleepy',\n *\n *   @equal('state', 'sleepy') napTime // true\n * });\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n * @param {Any} value - Value to compare the dependent property to\n ",
              "start": 3657,
              "end": 4235,
              "loc": {
                "start": {
                  "line": 123,
                  "column": 0
                },
                "end": {
                  "line": 141,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.empty](http://emberjs.com/api/classes/Ember.computed.html#method_empty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { empty } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   items: Ember.A(['taco', 'burrito']),\n *\n *   @empty('items') isEmpty // false\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the property to check emptiness of\n ",
            "start": 2930,
            "end": 3534,
            "loc": {
              "start": {
                "line": 101,
                "column": 0
              },
              "end": {
                "line": 120,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.equal](http://emberjs.com/api/classes/Ember.computed.html#method_equal)\n *\n * A computed property that returns true if the dependent properties are equal.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { equal } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   state: 'sleepy',\n *\n *   @equal('state', 'sleepy') napTime // true\n * });\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n * @param {Any} value - Value to compare the dependent property to\n ",
            "start": 3657,
            "end": 4235,
            "loc": {
              "start": {
                "line": 123,
                "column": 0
              },
              "end": {
                "line": 141,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 4236,
        "end": 4356,
        "loc": {
          "start": {
            "line": 142,
            "column": 0
          },
          "end": {
            "line": 142,
            "column": 120
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 4243,
          "end": 4356,
          "loc": {
            "start": {
              "line": 142,
              "column": 7
            },
            "end": {
              "line": 142,
              "column": 120
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 4249,
              "end": 4355,
              "loc": {
                "start": {
                  "line": 142,
                  "column": 13
                },
                "end": {
                  "line": 142,
                  "column": 119
                }
              },
              "id": {
                "type": "Identifier",
                "start": 4249,
                "end": 4254,
                "loc": {
                  "start": {
                    "line": 142,
                    "column": 13
                  },
                  "end": {
                    "line": 142,
                    "column": 18
                  },
                  "identifierName": "equal"
                },
                "name": "equal",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 4257,
                "end": 4355,
                "loc": {
                  "start": {
                    "line": 142,
                    "column": 21
                  },
                  "end": {
                    "line": 142,
                    "column": 119
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 4257,
                  "end": 4292,
                  "loc": {
                    "start": {
                      "line": 142,
                      "column": 21
                    },
                    "end": {
                      "line": 142,
                      "column": 56
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 4293,
                    "end": 4313,
                    "loc": {
                      "start": {
                        "line": 142,
                        "column": 57
                      },
                      "end": {
                        "line": 142,
                        "column": 77
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 4293,
                      "end": 4307,
                      "loc": {
                        "start": {
                          "line": 142,
                          "column": 57
                        },
                        "end": {
                          "line": 142,
                          "column": 71
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 4293,
                        "end": 4298,
                        "loc": {
                          "start": {
                            "line": 142,
                            "column": 57
                          },
                          "end": {
                            "line": 142,
                            "column": 62
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 4299,
                        "end": 4307,
                        "loc": {
                          "start": {
                            "line": 142,
                            "column": 63
                          },
                          "end": {
                            "line": 142,
                            "column": 71
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 4308,
                      "end": 4313,
                      "loc": {
                        "start": {
                          "line": 142,
                          "column": 72
                        },
                        "end": {
                          "line": 142,
                          "column": 77
                        },
                        "identifierName": "equal"
                      },
                      "name": "equal"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 4315,
                    "end": 4354,
                    "loc": {
                      "start": {
                        "line": 142,
                        "column": 79
                      },
                      "end": {
                        "line": 142,
                        "column": 118
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `equal` without parameters",
                      "raw": "'Cannot use `equal` without parameters'"
                    },
                    "value": "Cannot use `equal` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.equal](http://emberjs.com/api/classes/Ember.computed.html#method_equal)\n *\n * A computed property that returns true if the dependent properties are equal.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { equal } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   state: 'sleepy',\n *\n *   @equal('state', 'sleepy') napTime // true\n * });\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n * @param {Any} value - Value to compare the dependent property to\n ",
              "start": 3657,
              "end": 4235,
              "loc": {
                "start": {
                  "line": 123,
                  "column": 0
                },
                "end": {
                  "line": 141,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.filter](http://emberjs.com/api/classes/Ember.computed.html#method_filter)\n *\n * Filters the items in the array by the provided callback.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filter } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filter('chores', function(chore, index, array) {\n *     return !chore.done;\n *   }) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {Function(item: Any, index: Number, array: Array<Any>): Boolean} callback - The function to filter with\n ",
              "start": 4358,
              "end": 5219,
              "loc": {
                "start": {
                  "line": 144,
                  "column": 0
                },
                "end": {
                  "line": 169,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.equal](http://emberjs.com/api/classes/Ember.computed.html#method_equal)\n *\n * A computed property that returns true if the dependent properties are equal.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { equal } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   state: 'sleepy',\n *\n *   @equal('state', 'sleepy') napTime // true\n * });\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n * @param {Any} value - Value to compare the dependent property to\n ",
            "start": 3657,
            "end": 4235,
            "loc": {
              "start": {
                "line": 123,
                "column": 0
              },
              "end": {
                "line": 141,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.filter](http://emberjs.com/api/classes/Ember.computed.html#method_filter)\n *\n * Filters the items in the array by the provided callback.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filter } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filter('chores', function(chore, index, array) {\n *     return !chore.done;\n *   }) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {Function(item: Any, index: Number, array: Array<Any>): Boolean} callback - The function to filter with\n ",
            "start": 4358,
            "end": 5219,
            "loc": {
              "start": {
                "line": 144,
                "column": 0
              },
              "end": {
                "line": 169,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 5220,
        "end": 5343,
        "loc": {
          "start": {
            "line": 170,
            "column": 0
          },
          "end": {
            "line": 170,
            "column": 123
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 5227,
          "end": 5343,
          "loc": {
            "start": {
              "line": 170,
              "column": 7
            },
            "end": {
              "line": 170,
              "column": 123
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 5233,
              "end": 5342,
              "loc": {
                "start": {
                  "line": 170,
                  "column": 13
                },
                "end": {
                  "line": 170,
                  "column": 122
                }
              },
              "id": {
                "type": "Identifier",
                "start": 5233,
                "end": 5239,
                "loc": {
                  "start": {
                    "line": 170,
                    "column": 13
                  },
                  "end": {
                    "line": 170,
                    "column": 19
                  },
                  "identifierName": "filter"
                },
                "name": "filter",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 5242,
                "end": 5342,
                "loc": {
                  "start": {
                    "line": 170,
                    "column": 22
                  },
                  "end": {
                    "line": 170,
                    "column": 122
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 5242,
                  "end": 5277,
                  "loc": {
                    "start": {
                      "line": 170,
                      "column": 22
                    },
                    "end": {
                      "line": 170,
                      "column": 57
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 5278,
                    "end": 5299,
                    "loc": {
                      "start": {
                        "line": 170,
                        "column": 58
                      },
                      "end": {
                        "line": 170,
                        "column": 79
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 5278,
                      "end": 5292,
                      "loc": {
                        "start": {
                          "line": 170,
                          "column": 58
                        },
                        "end": {
                          "line": 170,
                          "column": 72
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 5278,
                        "end": 5283,
                        "loc": {
                          "start": {
                            "line": 170,
                            "column": 58
                          },
                          "end": {
                            "line": 170,
                            "column": 63
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 5284,
                        "end": 5292,
                        "loc": {
                          "start": {
                            "line": 170,
                            "column": 64
                          },
                          "end": {
                            "line": 170,
                            "column": 72
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 5293,
                      "end": 5299,
                      "loc": {
                        "start": {
                          "line": 170,
                          "column": 73
                        },
                        "end": {
                          "line": 170,
                          "column": 79
                        },
                        "identifierName": "filter"
                      },
                      "name": "filter"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 5301,
                    "end": 5341,
                    "loc": {
                      "start": {
                        "line": 170,
                        "column": 81
                      },
                      "end": {
                        "line": 170,
                        "column": 121
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `filter` without parameters",
                      "raw": "'Cannot use `filter` without parameters'"
                    },
                    "value": "Cannot use `filter` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.filter](http://emberjs.com/api/classes/Ember.computed.html#method_filter)\n *\n * Filters the items in the array by the provided callback.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filter } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filter('chores', function(chore, index, array) {\n *     return !chore.done;\n *   }) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {Function(item: Any, index: Number, array: Array<Any>): Boolean} callback - The function to filter with\n ",
              "start": 4358,
              "end": 5219,
              "loc": {
                "start": {
                  "line": 144,
                  "column": 0
                },
                "end": {
                  "line": 169,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.filterBy](http://emberjs.com/api/classes/Ember.computed.html#method_filterBy)\n *\n * Filters the array by the property and value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filterBy } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filterBy('chores', 'done', false) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {String} propertyKey - Property of the array items to filter by\n * @param {Any} value - Value to filter by\n ",
              "start": 5345,
              "end": 6153,
              "loc": {
                "start": {
                  "line": 172,
                  "column": 0
                },
                "end": {
                  "line": 196,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.filter](http://emberjs.com/api/classes/Ember.computed.html#method_filter)\n *\n * Filters the items in the array by the provided callback.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filter } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filter('chores', function(chore, index, array) {\n *     return !chore.done;\n *   }) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {Function(item: Any, index: Number, array: Array<Any>): Boolean} callback - The function to filter with\n ",
            "start": 4358,
            "end": 5219,
            "loc": {
              "start": {
                "line": 144,
                "column": 0
              },
              "end": {
                "line": 169,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.filterBy](http://emberjs.com/api/classes/Ember.computed.html#method_filterBy)\n *\n * Filters the array by the property and value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filterBy } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filterBy('chores', 'done', false) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {String} propertyKey - Property of the array items to filter by\n * @param {Any} value - Value to filter by\n ",
            "start": 5345,
            "end": 6153,
            "loc": {
              "start": {
                "line": 172,
                "column": 0
              },
              "end": {
                "line": 196,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 6154,
        "end": 6283,
        "loc": {
          "start": {
            "line": 197,
            "column": 0
          },
          "end": {
            "line": 197,
            "column": 129
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 6161,
          "end": 6283,
          "loc": {
            "start": {
              "line": 197,
              "column": 7
            },
            "end": {
              "line": 197,
              "column": 129
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 6167,
              "end": 6282,
              "loc": {
                "start": {
                  "line": 197,
                  "column": 13
                },
                "end": {
                  "line": 197,
                  "column": 128
                }
              },
              "id": {
                "type": "Identifier",
                "start": 6167,
                "end": 6175,
                "loc": {
                  "start": {
                    "line": 197,
                    "column": 13
                  },
                  "end": {
                    "line": 197,
                    "column": 21
                  },
                  "identifierName": "filterBy"
                },
                "name": "filterBy",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 6178,
                "end": 6282,
                "loc": {
                  "start": {
                    "line": 197,
                    "column": 24
                  },
                  "end": {
                    "line": 197,
                    "column": 128
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 6178,
                  "end": 6213,
                  "loc": {
                    "start": {
                      "line": 197,
                      "column": 24
                    },
                    "end": {
                      "line": 197,
                      "column": 59
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 6214,
                    "end": 6237,
                    "loc": {
                      "start": {
                        "line": 197,
                        "column": 60
                      },
                      "end": {
                        "line": 197,
                        "column": 83
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 6214,
                      "end": 6228,
                      "loc": {
                        "start": {
                          "line": 197,
                          "column": 60
                        },
                        "end": {
                          "line": 197,
                          "column": 74
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 6214,
                        "end": 6219,
                        "loc": {
                          "start": {
                            "line": 197,
                            "column": 60
                          },
                          "end": {
                            "line": 197,
                            "column": 65
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 6220,
                        "end": 6228,
                        "loc": {
                          "start": {
                            "line": 197,
                            "column": 66
                          },
                          "end": {
                            "line": 197,
                            "column": 74
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 6229,
                      "end": 6237,
                      "loc": {
                        "start": {
                          "line": 197,
                          "column": 75
                        },
                        "end": {
                          "line": 197,
                          "column": 83
                        },
                        "identifierName": "filterBy"
                      },
                      "name": "filterBy"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 6239,
                    "end": 6281,
                    "loc": {
                      "start": {
                        "line": 197,
                        "column": 85
                      },
                      "end": {
                        "line": 197,
                        "column": 127
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `filterBy` without parameters",
                      "raw": "'Cannot use `filterBy` without parameters'"
                    },
                    "value": "Cannot use `filterBy` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.filterBy](http://emberjs.com/api/classes/Ember.computed.html#method_filterBy)\n *\n * Filters the array by the property and value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filterBy } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filterBy('chores', 'done', false) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {String} propertyKey - Property of the array items to filter by\n * @param {Any} value - Value to filter by\n ",
              "start": 5345,
              "end": 6153,
              "loc": {
                "start": {
                  "line": 172,
                  "column": 0
                },
                "end": {
                  "line": 196,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.gt](http://emberjs.com/api/classes/Ember.computed.html#method_gt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gt } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalCats: 11,\n *\n *   @gt('totalCats', 10) isCatParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
              "start": 6285,
              "end": 6881,
              "loc": {
                "start": {
                  "line": 199,
                  "column": 0
                },
                "end": {
                  "line": 219,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.filterBy](http://emberjs.com/api/classes/Ember.computed.html#method_filterBy)\n *\n * Filters the array by the property and value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filterBy } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filterBy('chores', 'done', false) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {String} propertyKey - Property of the array items to filter by\n * @param {Any} value - Value to filter by\n ",
            "start": 5345,
            "end": 6153,
            "loc": {
              "start": {
                "line": 172,
                "column": 0
              },
              "end": {
                "line": 196,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.gt](http://emberjs.com/api/classes/Ember.computed.html#method_gt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gt } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalCats: 11,\n *\n *   @gt('totalCats', 10) isCatParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
            "start": 6285,
            "end": 6881,
            "loc": {
              "start": {
                "line": 199,
                "column": 0
              },
              "end": {
                "line": 219,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 6882,
        "end": 6993,
        "loc": {
          "start": {
            "line": 220,
            "column": 0
          },
          "end": {
            "line": 220,
            "column": 111
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 6889,
          "end": 6993,
          "loc": {
            "start": {
              "line": 220,
              "column": 7
            },
            "end": {
              "line": 220,
              "column": 111
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 6895,
              "end": 6992,
              "loc": {
                "start": {
                  "line": 220,
                  "column": 13
                },
                "end": {
                  "line": 220,
                  "column": 110
                }
              },
              "id": {
                "type": "Identifier",
                "start": 6895,
                "end": 6897,
                "loc": {
                  "start": {
                    "line": 220,
                    "column": 13
                  },
                  "end": {
                    "line": 220,
                    "column": 15
                  },
                  "identifierName": "gt"
                },
                "name": "gt",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 6900,
                "end": 6992,
                "loc": {
                  "start": {
                    "line": 220,
                    "column": 18
                  },
                  "end": {
                    "line": 220,
                    "column": 110
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 6900,
                  "end": 6935,
                  "loc": {
                    "start": {
                      "line": 220,
                      "column": 18
                    },
                    "end": {
                      "line": 220,
                      "column": 53
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 6936,
                    "end": 6953,
                    "loc": {
                      "start": {
                        "line": 220,
                        "column": 54
                      },
                      "end": {
                        "line": 220,
                        "column": 71
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 6936,
                      "end": 6950,
                      "loc": {
                        "start": {
                          "line": 220,
                          "column": 54
                        },
                        "end": {
                          "line": 220,
                          "column": 68
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 6936,
                        "end": 6941,
                        "loc": {
                          "start": {
                            "line": 220,
                            "column": 54
                          },
                          "end": {
                            "line": 220,
                            "column": 59
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 6942,
                        "end": 6950,
                        "loc": {
                          "start": {
                            "line": 220,
                            "column": 60
                          },
                          "end": {
                            "line": 220,
                            "column": 68
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 6951,
                      "end": 6953,
                      "loc": {
                        "start": {
                          "line": 220,
                          "column": 69
                        },
                        "end": {
                          "line": 220,
                          "column": 71
                        },
                        "identifierName": "gt"
                      },
                      "name": "gt"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 6955,
                    "end": 6991,
                    "loc": {
                      "start": {
                        "line": 220,
                        "column": 73
                      },
                      "end": {
                        "line": 220,
                        "column": 109
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `gt` without parameters",
                      "raw": "'Cannot use `gt` without parameters'"
                    },
                    "value": "Cannot use `gt` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.gt](http://emberjs.com/api/classes/Ember.computed.html#method_gt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gt } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalCats: 11,\n *\n *   @gt('totalCats', 10) isCatParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
              "start": 6285,
              "end": 6881,
              "loc": {
                "start": {
                  "line": 199,
                  "column": 0
                },
                "end": {
                  "line": 219,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.gte](http://emberjs.com/api/classes/Ember.computed.html#method_gte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gte } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @gte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
              "start": 6995,
              "end": 7619,
              "loc": {
                "start": {
                  "line": 222,
                  "column": 0
                },
                "end": {
                  "line": 242,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.gt](http://emberjs.com/api/classes/Ember.computed.html#method_gt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gt } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalCats: 11,\n *\n *   @gt('totalCats', 10) isCatParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
            "start": 6285,
            "end": 6881,
            "loc": {
              "start": {
                "line": 199,
                "column": 0
              },
              "end": {
                "line": 219,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.gte](http://emberjs.com/api/classes/Ember.computed.html#method_gte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gte } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @gte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
            "start": 6995,
            "end": 7619,
            "loc": {
              "start": {
                "line": 222,
                "column": 0
              },
              "end": {
                "line": 242,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 7620,
        "end": 7734,
        "loc": {
          "start": {
            "line": 243,
            "column": 0
          },
          "end": {
            "line": 243,
            "column": 114
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 7627,
          "end": 7734,
          "loc": {
            "start": {
              "line": 243,
              "column": 7
            },
            "end": {
              "line": 243,
              "column": 114
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 7633,
              "end": 7733,
              "loc": {
                "start": {
                  "line": 243,
                  "column": 13
                },
                "end": {
                  "line": 243,
                  "column": 113
                }
              },
              "id": {
                "type": "Identifier",
                "start": 7633,
                "end": 7636,
                "loc": {
                  "start": {
                    "line": 243,
                    "column": 13
                  },
                  "end": {
                    "line": 243,
                    "column": 16
                  },
                  "identifierName": "gte"
                },
                "name": "gte",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 7639,
                "end": 7733,
                "loc": {
                  "start": {
                    "line": 243,
                    "column": 19
                  },
                  "end": {
                    "line": 243,
                    "column": 113
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 7639,
                  "end": 7674,
                  "loc": {
                    "start": {
                      "line": 243,
                      "column": 19
                    },
                    "end": {
                      "line": 243,
                      "column": 54
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 7675,
                    "end": 7693,
                    "loc": {
                      "start": {
                        "line": 243,
                        "column": 55
                      },
                      "end": {
                        "line": 243,
                        "column": 73
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 7675,
                      "end": 7689,
                      "loc": {
                        "start": {
                          "line": 243,
                          "column": 55
                        },
                        "end": {
                          "line": 243,
                          "column": 69
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 7675,
                        "end": 7680,
                        "loc": {
                          "start": {
                            "line": 243,
                            "column": 55
                          },
                          "end": {
                            "line": 243,
                            "column": 60
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 7681,
                        "end": 7689,
                        "loc": {
                          "start": {
                            "line": 243,
                            "column": 61
                          },
                          "end": {
                            "line": 243,
                            "column": 69
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 7690,
                      "end": 7693,
                      "loc": {
                        "start": {
                          "line": 243,
                          "column": 70
                        },
                        "end": {
                          "line": 243,
                          "column": 73
                        },
                        "identifierName": "gte"
                      },
                      "name": "gte"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 7695,
                    "end": 7732,
                    "loc": {
                      "start": {
                        "line": 243,
                        "column": 75
                      },
                      "end": {
                        "line": 243,
                        "column": 112
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `gte` without parameters",
                      "raw": "'Cannot use `gte` without parameters'"
                    },
                    "value": "Cannot use `gte` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.gte](http://emberjs.com/api/classes/Ember.computed.html#method_gte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gte } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @gte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
              "start": 6995,
              "end": 7619,
              "loc": {
                "start": {
                  "line": 222,
                  "column": 0
                },
                "end": {
                  "line": 242,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.intersect](http://emberjs.com/api/classes/Ember.computed.html#method_intersect)\n *\n * A computed property which returns a new array with all the duplicated\n * elements from two or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { intersect } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @intersect('likes', 'foods') favoriteFoods // ['tacos', 'pizza']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to intersect\n ",
              "start": 7736,
              "end": 8408,
              "loc": {
                "start": {
                  "line": 245,
                  "column": 0
                },
                "end": {
                  "line": 265,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.gte](http://emberjs.com/api/classes/Ember.computed.html#method_gte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gte } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @gte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
            "start": 6995,
            "end": 7619,
            "loc": {
              "start": {
                "line": 222,
                "column": 0
              },
              "end": {
                "line": 242,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.intersect](http://emberjs.com/api/classes/Ember.computed.html#method_intersect)\n *\n * A computed property which returns a new array with all the duplicated\n * elements from two or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { intersect } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @intersect('likes', 'foods') favoriteFoods // ['tacos', 'pizza']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to intersect\n ",
            "start": 7736,
            "end": 8408,
            "loc": {
              "start": {
                "line": 245,
                "column": 0
              },
              "end": {
                "line": 265,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 8409,
        "end": 8541,
        "loc": {
          "start": {
            "line": 266,
            "column": 0
          },
          "end": {
            "line": 266,
            "column": 132
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 8416,
          "end": 8541,
          "loc": {
            "start": {
              "line": 266,
              "column": 7
            },
            "end": {
              "line": 266,
              "column": 132
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 8422,
              "end": 8540,
              "loc": {
                "start": {
                  "line": 266,
                  "column": 13
                },
                "end": {
                  "line": 266,
                  "column": 131
                }
              },
              "id": {
                "type": "Identifier",
                "start": 8422,
                "end": 8431,
                "loc": {
                  "start": {
                    "line": 266,
                    "column": 13
                  },
                  "end": {
                    "line": 266,
                    "column": 22
                  },
                  "identifierName": "intersect"
                },
                "name": "intersect",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 8434,
                "end": 8540,
                "loc": {
                  "start": {
                    "line": 266,
                    "column": 25
                  },
                  "end": {
                    "line": 266,
                    "column": 131
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 8434,
                  "end": 8469,
                  "loc": {
                    "start": {
                      "line": 266,
                      "column": 25
                    },
                    "end": {
                      "line": 266,
                      "column": 60
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 8470,
                    "end": 8494,
                    "loc": {
                      "start": {
                        "line": 266,
                        "column": 61
                      },
                      "end": {
                        "line": 266,
                        "column": 85
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 8470,
                      "end": 8484,
                      "loc": {
                        "start": {
                          "line": 266,
                          "column": 61
                        },
                        "end": {
                          "line": 266,
                          "column": 75
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 8470,
                        "end": 8475,
                        "loc": {
                          "start": {
                            "line": 266,
                            "column": 61
                          },
                          "end": {
                            "line": 266,
                            "column": 66
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 8476,
                        "end": 8484,
                        "loc": {
                          "start": {
                            "line": 266,
                            "column": 67
                          },
                          "end": {
                            "line": 266,
                            "column": 75
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 8485,
                      "end": 8494,
                      "loc": {
                        "start": {
                          "line": 266,
                          "column": 76
                        },
                        "end": {
                          "line": 266,
                          "column": 85
                        },
                        "identifierName": "intersect"
                      },
                      "name": "intersect"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 8496,
                    "end": 8539,
                    "loc": {
                      "start": {
                        "line": 266,
                        "column": 87
                      },
                      "end": {
                        "line": 266,
                        "column": 130
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `intersect` without parameters",
                      "raw": "'Cannot use `intersect` without parameters'"
                    },
                    "value": "Cannot use `intersect` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.intersect](http://emberjs.com/api/classes/Ember.computed.html#method_intersect)\n *\n * A computed property which returns a new array with all the duplicated\n * elements from two or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { intersect } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @intersect('likes', 'foods') favoriteFoods // ['tacos', 'pizza']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to intersect\n ",
              "start": 7736,
              "end": 8408,
              "loc": {
                "start": {
                  "line": 245,
                  "column": 0
                },
                "end": {
                  "line": 265,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.lt](http://emberjs.com/api/classes/Ember.computed.html#method_lt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lt } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalDogs: 3,\n *\n *   @lt('totalDogs', 10) isDogParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
              "start": 8543,
              "end": 9135,
              "loc": {
                "start": {
                  "line": 268,
                  "column": 0
                },
                "end": {
                  "line": 288,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.intersect](http://emberjs.com/api/classes/Ember.computed.html#method_intersect)\n *\n * A computed property which returns a new array with all the duplicated\n * elements from two or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { intersect } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @intersect('likes', 'foods') favoriteFoods // ['tacos', 'pizza']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to intersect\n ",
            "start": 7736,
            "end": 8408,
            "loc": {
              "start": {
                "line": 245,
                "column": 0
              },
              "end": {
                "line": 265,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.lt](http://emberjs.com/api/classes/Ember.computed.html#method_lt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lt } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalDogs: 3,\n *\n *   @lt('totalDogs', 10) isDogParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
            "start": 8543,
            "end": 9135,
            "loc": {
              "start": {
                "line": 268,
                "column": 0
              },
              "end": {
                "line": 288,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 9136,
        "end": 9247,
        "loc": {
          "start": {
            "line": 289,
            "column": 0
          },
          "end": {
            "line": 289,
            "column": 111
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 9143,
          "end": 9247,
          "loc": {
            "start": {
              "line": 289,
              "column": 7
            },
            "end": {
              "line": 289,
              "column": 111
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 9149,
              "end": 9246,
              "loc": {
                "start": {
                  "line": 289,
                  "column": 13
                },
                "end": {
                  "line": 289,
                  "column": 110
                }
              },
              "id": {
                "type": "Identifier",
                "start": 9149,
                "end": 9151,
                "loc": {
                  "start": {
                    "line": 289,
                    "column": 13
                  },
                  "end": {
                    "line": 289,
                    "column": 15
                  },
                  "identifierName": "lt"
                },
                "name": "lt",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 9154,
                "end": 9246,
                "loc": {
                  "start": {
                    "line": 289,
                    "column": 18
                  },
                  "end": {
                    "line": 289,
                    "column": 110
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 9154,
                  "end": 9189,
                  "loc": {
                    "start": {
                      "line": 289,
                      "column": 18
                    },
                    "end": {
                      "line": 289,
                      "column": 53
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 9190,
                    "end": 9207,
                    "loc": {
                      "start": {
                        "line": 289,
                        "column": 54
                      },
                      "end": {
                        "line": 289,
                        "column": 71
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 9190,
                      "end": 9204,
                      "loc": {
                        "start": {
                          "line": 289,
                          "column": 54
                        },
                        "end": {
                          "line": 289,
                          "column": 68
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 9190,
                        "end": 9195,
                        "loc": {
                          "start": {
                            "line": 289,
                            "column": 54
                          },
                          "end": {
                            "line": 289,
                            "column": 59
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 9196,
                        "end": 9204,
                        "loc": {
                          "start": {
                            "line": 289,
                            "column": 60
                          },
                          "end": {
                            "line": 289,
                            "column": 68
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 9205,
                      "end": 9207,
                      "loc": {
                        "start": {
                          "line": 289,
                          "column": 69
                        },
                        "end": {
                          "line": 289,
                          "column": 71
                        },
                        "identifierName": "lt"
                      },
                      "name": "lt"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 9209,
                    "end": 9245,
                    "loc": {
                      "start": {
                        "line": 289,
                        "column": 73
                      },
                      "end": {
                        "line": 289,
                        "column": 109
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `lt` without parameters",
                      "raw": "'Cannot use `lt` without parameters'"
                    },
                    "value": "Cannot use `lt` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.lt](http://emberjs.com/api/classes/Ember.computed.html#method_lt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lt } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalDogs: 3,\n *\n *   @lt('totalDogs', 10) isDogParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
              "start": 8543,
              "end": 9135,
              "loc": {
                "start": {
                  "line": 268,
                  "column": 0
                },
                "end": {
                  "line": 288,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.lte](http://emberjs.com/api/classes/Ember.computed.html#method_lte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lte } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @lte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
              "start": 9249,
              "end": 9870,
              "loc": {
                "start": {
                  "line": 291,
                  "column": 0
                },
                "end": {
                  "line": 311,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.lt](http://emberjs.com/api/classes/Ember.computed.html#method_lt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lt } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalDogs: 3,\n *\n *   @lt('totalDogs', 10) isDogParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
            "start": 8543,
            "end": 9135,
            "loc": {
              "start": {
                "line": 268,
                "column": 0
              },
              "end": {
                "line": 288,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.lte](http://emberjs.com/api/classes/Ember.computed.html#method_lte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lte } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @lte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
            "start": 9249,
            "end": 9870,
            "loc": {
              "start": {
                "line": 291,
                "column": 0
              },
              "end": {
                "line": 311,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 9871,
        "end": 9985,
        "loc": {
          "start": {
            "line": 312,
            "column": 0
          },
          "end": {
            "line": 312,
            "column": 114
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 9878,
          "end": 9985,
          "loc": {
            "start": {
              "line": 312,
              "column": 7
            },
            "end": {
              "line": 312,
              "column": 114
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 9884,
              "end": 9984,
              "loc": {
                "start": {
                  "line": 312,
                  "column": 13
                },
                "end": {
                  "line": 312,
                  "column": 113
                }
              },
              "id": {
                "type": "Identifier",
                "start": 9884,
                "end": 9887,
                "loc": {
                  "start": {
                    "line": 312,
                    "column": 13
                  },
                  "end": {
                    "line": 312,
                    "column": 16
                  },
                  "identifierName": "lte"
                },
                "name": "lte",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 9890,
                "end": 9984,
                "loc": {
                  "start": {
                    "line": 312,
                    "column": 19
                  },
                  "end": {
                    "line": 312,
                    "column": 113
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 9890,
                  "end": 9925,
                  "loc": {
                    "start": {
                      "line": 312,
                      "column": 19
                    },
                    "end": {
                      "line": 312,
                      "column": 54
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 9926,
                    "end": 9944,
                    "loc": {
                      "start": {
                        "line": 312,
                        "column": 55
                      },
                      "end": {
                        "line": 312,
                        "column": 73
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 9926,
                      "end": 9940,
                      "loc": {
                        "start": {
                          "line": 312,
                          "column": 55
                        },
                        "end": {
                          "line": 312,
                          "column": 69
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 9926,
                        "end": 9931,
                        "loc": {
                          "start": {
                            "line": 312,
                            "column": 55
                          },
                          "end": {
                            "line": 312,
                            "column": 60
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 9932,
                        "end": 9940,
                        "loc": {
                          "start": {
                            "line": 312,
                            "column": 61
                          },
                          "end": {
                            "line": 312,
                            "column": 69
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 9941,
                      "end": 9944,
                      "loc": {
                        "start": {
                          "line": 312,
                          "column": 70
                        },
                        "end": {
                          "line": 312,
                          "column": 73
                        },
                        "identifierName": "lte"
                      },
                      "name": "lte"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 9946,
                    "end": 9983,
                    "loc": {
                      "start": {
                        "line": 312,
                        "column": 75
                      },
                      "end": {
                        "line": 312,
                        "column": 112
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `lte` without parameters",
                      "raw": "'Cannot use `lte` without parameters'"
                    },
                    "value": "Cannot use `lte` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.lte](http://emberjs.com/api/classes/Ember.computed.html#method_lte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lte } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @lte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
              "start": 9249,
              "end": 9870,
              "loc": {
                "start": {
                  "line": 291,
                  "column": 0
                },
                "end": {
                  "line": 311,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.map](http://emberjs.com/api/classes/Ember.computed.html#method_map)\n *\n * Returns an array mapped via the callback\n *\n * ```javascript\n * import Ember from 'ember';\n * import { map } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A(['clean', 'write more unit tests']),\n *\n *   @map('chores', function(chore, index) {\n *     return chore.toUpperCase() + '!';\n *   }) loudChores // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {Function(item: Any, index: Number): Any} callback - Function to map over the array\n ",
              "start": 9987,
              "end": 10691,
              "loc": {
                "start": {
                  "line": 314,
                  "column": 0
                },
                "end": {
                  "line": 335,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.lte](http://emberjs.com/api/classes/Ember.computed.html#method_lte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lte } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @lte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
            "start": 9249,
            "end": 9870,
            "loc": {
              "start": {
                "line": 291,
                "column": 0
              },
              "end": {
                "line": 311,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.map](http://emberjs.com/api/classes/Ember.computed.html#method_map)\n *\n * Returns an array mapped via the callback\n *\n * ```javascript\n * import Ember from 'ember';\n * import { map } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A(['clean', 'write more unit tests']),\n *\n *   @map('chores', function(chore, index) {\n *     return chore.toUpperCase() + '!';\n *   }) loudChores // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {Function(item: Any, index: Number): Any} callback - Function to map over the array\n ",
            "start": 9987,
            "end": 10691,
            "loc": {
              "start": {
                "line": 314,
                "column": 0
              },
              "end": {
                "line": 335,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 10692,
        "end": 10806,
        "loc": {
          "start": {
            "line": 336,
            "column": 0
          },
          "end": {
            "line": 336,
            "column": 114
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 10699,
          "end": 10806,
          "loc": {
            "start": {
              "line": 336,
              "column": 7
            },
            "end": {
              "line": 336,
              "column": 114
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 10705,
              "end": 10805,
              "loc": {
                "start": {
                  "line": 336,
                  "column": 13
                },
                "end": {
                  "line": 336,
                  "column": 113
                }
              },
              "id": {
                "type": "Identifier",
                "start": 10705,
                "end": 10708,
                "loc": {
                  "start": {
                    "line": 336,
                    "column": 13
                  },
                  "end": {
                    "line": 336,
                    "column": 16
                  },
                  "identifierName": "map"
                },
                "name": "map",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 10711,
                "end": 10805,
                "loc": {
                  "start": {
                    "line": 336,
                    "column": 19
                  },
                  "end": {
                    "line": 336,
                    "column": 113
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 10711,
                  "end": 10746,
                  "loc": {
                    "start": {
                      "line": 336,
                      "column": 19
                    },
                    "end": {
                      "line": 336,
                      "column": 54
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 10747,
                    "end": 10765,
                    "loc": {
                      "start": {
                        "line": 336,
                        "column": 55
                      },
                      "end": {
                        "line": 336,
                        "column": 73
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 10747,
                      "end": 10761,
                      "loc": {
                        "start": {
                          "line": 336,
                          "column": 55
                        },
                        "end": {
                          "line": 336,
                          "column": 69
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 10747,
                        "end": 10752,
                        "loc": {
                          "start": {
                            "line": 336,
                            "column": 55
                          },
                          "end": {
                            "line": 336,
                            "column": 60
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 10753,
                        "end": 10761,
                        "loc": {
                          "start": {
                            "line": 336,
                            "column": 61
                          },
                          "end": {
                            "line": 336,
                            "column": 69
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 10762,
                      "end": 10765,
                      "loc": {
                        "start": {
                          "line": 336,
                          "column": 70
                        },
                        "end": {
                          "line": 336,
                          "column": 73
                        },
                        "identifierName": "map"
                      },
                      "name": "map"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 10767,
                    "end": 10804,
                    "loc": {
                      "start": {
                        "line": 336,
                        "column": 75
                      },
                      "end": {
                        "line": 336,
                        "column": 112
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `map` without parameters",
                      "raw": "'Cannot use `map` without parameters'"
                    },
                    "value": "Cannot use `map` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.map](http://emberjs.com/api/classes/Ember.computed.html#method_map)\n *\n * Returns an array mapped via the callback\n *\n * ```javascript\n * import Ember from 'ember';\n * import { map } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A(['clean', 'write more unit tests']),\n *\n *   @map('chores', function(chore, index) {\n *     return chore.toUpperCase() + '!';\n *   }) loudChores // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {Function(item: Any, index: Number): Any} callback - Function to map over the array\n ",
              "start": 9987,
              "end": 10691,
              "loc": {
                "start": {
                  "line": 314,
                  "column": 0
                },
                "end": {
                  "line": 335,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.mapBy](http://emberjs.com/api/classes/Ember.computed.html#method_mapBy)\n *\n * Returns an array mapped to the specified key.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { mapBy } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   people: Ember.A([\n *     {name: \"George\", age: 5},\n *     {name: \"Stella\", age: 10},\n *     {name: \"Violet\", age: 7}\n *   ]),\n *\n *   @mapBy('people', 'age') ages // [5, 10, 7]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {String} propertyKey - Property of the array items to map by\n ",
              "start": 10808,
              "end": 11476,
              "loc": {
                "start": {
                  "line": 338,
                  "column": 0
                },
                "end": {
                  "line": 361,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.map](http://emberjs.com/api/classes/Ember.computed.html#method_map)\n *\n * Returns an array mapped via the callback\n *\n * ```javascript\n * import Ember from 'ember';\n * import { map } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A(['clean', 'write more unit tests']),\n *\n *   @map('chores', function(chore, index) {\n *     return chore.toUpperCase() + '!';\n *   }) loudChores // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {Function(item: Any, index: Number): Any} callback - Function to map over the array\n ",
            "start": 9987,
            "end": 10691,
            "loc": {
              "start": {
                "line": 314,
                "column": 0
              },
              "end": {
                "line": 335,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.mapBy](http://emberjs.com/api/classes/Ember.computed.html#method_mapBy)\n *\n * Returns an array mapped to the specified key.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { mapBy } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   people: Ember.A([\n *     {name: \"George\", age: 5},\n *     {name: \"Stella\", age: 10},\n *     {name: \"Violet\", age: 7}\n *   ]),\n *\n *   @mapBy('people', 'age') ages // [5, 10, 7]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {String} propertyKey - Property of the array items to map by\n ",
            "start": 10808,
            "end": 11476,
            "loc": {
              "start": {
                "line": 338,
                "column": 0
              },
              "end": {
                "line": 361,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 11477,
        "end": 11597,
        "loc": {
          "start": {
            "line": 362,
            "column": 0
          },
          "end": {
            "line": 362,
            "column": 120
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 11484,
          "end": 11597,
          "loc": {
            "start": {
              "line": 362,
              "column": 7
            },
            "end": {
              "line": 362,
              "column": 120
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 11490,
              "end": 11596,
              "loc": {
                "start": {
                  "line": 362,
                  "column": 13
                },
                "end": {
                  "line": 362,
                  "column": 119
                }
              },
              "id": {
                "type": "Identifier",
                "start": 11490,
                "end": 11495,
                "loc": {
                  "start": {
                    "line": 362,
                    "column": 13
                  },
                  "end": {
                    "line": 362,
                    "column": 18
                  },
                  "identifierName": "mapBy"
                },
                "name": "mapBy",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 11498,
                "end": 11596,
                "loc": {
                  "start": {
                    "line": 362,
                    "column": 21
                  },
                  "end": {
                    "line": 362,
                    "column": 119
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 11498,
                  "end": 11533,
                  "loc": {
                    "start": {
                      "line": 362,
                      "column": 21
                    },
                    "end": {
                      "line": 362,
                      "column": 56
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 11534,
                    "end": 11554,
                    "loc": {
                      "start": {
                        "line": 362,
                        "column": 57
                      },
                      "end": {
                        "line": 362,
                        "column": 77
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 11534,
                      "end": 11548,
                      "loc": {
                        "start": {
                          "line": 362,
                          "column": 57
                        },
                        "end": {
                          "line": 362,
                          "column": 71
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 11534,
                        "end": 11539,
                        "loc": {
                          "start": {
                            "line": 362,
                            "column": 57
                          },
                          "end": {
                            "line": 362,
                            "column": 62
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 11540,
                        "end": 11548,
                        "loc": {
                          "start": {
                            "line": 362,
                            "column": 63
                          },
                          "end": {
                            "line": 362,
                            "column": 71
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 11549,
                      "end": 11554,
                      "loc": {
                        "start": {
                          "line": 362,
                          "column": 72
                        },
                        "end": {
                          "line": 362,
                          "column": 77
                        },
                        "identifierName": "mapBy"
                      },
                      "name": "mapBy"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 11556,
                    "end": 11595,
                    "loc": {
                      "start": {
                        "line": 362,
                        "column": 79
                      },
                      "end": {
                        "line": 362,
                        "column": 118
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `mapBy` without parameters",
                      "raw": "'Cannot use `mapBy` without parameters'"
                    },
                    "value": "Cannot use `mapBy` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.mapBy](http://emberjs.com/api/classes/Ember.computed.html#method_mapBy)\n *\n * Returns an array mapped to the specified key.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { mapBy } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   people: Ember.A([\n *     {name: \"George\", age: 5},\n *     {name: \"Stella\", age: 10},\n *     {name: \"Violet\", age: 7}\n *   ]),\n *\n *   @mapBy('people', 'age') ages // [5, 10, 7]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {String} propertyKey - Property of the array items to map by\n ",
              "start": 10808,
              "end": 11476,
              "loc": {
                "start": {
                  "line": 338,
                  "column": 0
                },
                "end": {
                  "line": 361,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.match](http://emberjs.com/api/classes/Ember.computed.html#method_match)\n *\n * A computed property which matches the original value for the dependent\n * property against a given RegExp, returning `true` if they values matches\n * the RegExp and `false` if it does not.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { match } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   email: 'tomster@emberjs.com',\n *\n *   @match('email', /^.+@.+\\..+$/) validEmail\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The property to match\n * @param {RegExp} pattern - The pattern to match against\n ",
              "start": 11599,
              "end": 12292,
              "loc": {
                "start": {
                  "line": 364,
                  "column": 0
                },
                "end": {
                  "line": 385,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.mapBy](http://emberjs.com/api/classes/Ember.computed.html#method_mapBy)\n *\n * Returns an array mapped to the specified key.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { mapBy } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   people: Ember.A([\n *     {name: \"George\", age: 5},\n *     {name: \"Stella\", age: 10},\n *     {name: \"Violet\", age: 7}\n *   ]),\n *\n *   @mapBy('people', 'age') ages // [5, 10, 7]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {String} propertyKey - Property of the array items to map by\n ",
            "start": 10808,
            "end": 11476,
            "loc": {
              "start": {
                "line": 338,
                "column": 0
              },
              "end": {
                "line": 361,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.match](http://emberjs.com/api/classes/Ember.computed.html#method_match)\n *\n * A computed property which matches the original value for the dependent\n * property against a given RegExp, returning `true` if they values matches\n * the RegExp and `false` if it does not.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { match } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   email: 'tomster@emberjs.com',\n *\n *   @match('email', /^.+@.+\\..+$/) validEmail\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The property to match\n * @param {RegExp} pattern - The pattern to match against\n ",
            "start": 11599,
            "end": 12292,
            "loc": {
              "start": {
                "line": 364,
                "column": 0
              },
              "end": {
                "line": 385,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 12293,
        "end": 12413,
        "loc": {
          "start": {
            "line": 386,
            "column": 0
          },
          "end": {
            "line": 386,
            "column": 120
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 12300,
          "end": 12413,
          "loc": {
            "start": {
              "line": 386,
              "column": 7
            },
            "end": {
              "line": 386,
              "column": 120
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 12306,
              "end": 12412,
              "loc": {
                "start": {
                  "line": 386,
                  "column": 13
                },
                "end": {
                  "line": 386,
                  "column": 119
                }
              },
              "id": {
                "type": "Identifier",
                "start": 12306,
                "end": 12311,
                "loc": {
                  "start": {
                    "line": 386,
                    "column": 13
                  },
                  "end": {
                    "line": 386,
                    "column": 18
                  },
                  "identifierName": "match"
                },
                "name": "match",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 12314,
                "end": 12412,
                "loc": {
                  "start": {
                    "line": 386,
                    "column": 21
                  },
                  "end": {
                    "line": 386,
                    "column": 119
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 12314,
                  "end": 12349,
                  "loc": {
                    "start": {
                      "line": 386,
                      "column": 21
                    },
                    "end": {
                      "line": 386,
                      "column": 56
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 12350,
                    "end": 12370,
                    "loc": {
                      "start": {
                        "line": 386,
                        "column": 57
                      },
                      "end": {
                        "line": 386,
                        "column": 77
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 12350,
                      "end": 12364,
                      "loc": {
                        "start": {
                          "line": 386,
                          "column": 57
                        },
                        "end": {
                          "line": 386,
                          "column": 71
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 12350,
                        "end": 12355,
                        "loc": {
                          "start": {
                            "line": 386,
                            "column": 57
                          },
                          "end": {
                            "line": 386,
                            "column": 62
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 12356,
                        "end": 12364,
                        "loc": {
                          "start": {
                            "line": 386,
                            "column": 63
                          },
                          "end": {
                            "line": 386,
                            "column": 71
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 12365,
                      "end": 12370,
                      "loc": {
                        "start": {
                          "line": 386,
                          "column": 72
                        },
                        "end": {
                          "line": 386,
                          "column": 77
                        },
                        "identifierName": "match"
                      },
                      "name": "match"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 12372,
                    "end": 12411,
                    "loc": {
                      "start": {
                        "line": 386,
                        "column": 79
                      },
                      "end": {
                        "line": 386,
                        "column": 118
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `match` without parameters",
                      "raw": "'Cannot use `match` without parameters'"
                    },
                    "value": "Cannot use `match` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.match](http://emberjs.com/api/classes/Ember.computed.html#method_match)\n *\n * A computed property which matches the original value for the dependent\n * property against a given RegExp, returning `true` if they values matches\n * the RegExp and `false` if it does not.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { match } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   email: 'tomster@emberjs.com',\n *\n *   @match('email', /^.+@.+\\..+$/) validEmail\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The property to match\n * @param {RegExp} pattern - The pattern to match against\n ",
              "start": 11599,
              "end": 12292,
              "loc": {
                "start": {
                  "line": 364,
                  "column": 0
                },
                "end": {
                  "line": 385,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.max](http://emberjs.com/api/classes/Ember.computed.html#method_max)\n *\n * A computed property that calculates the maximum value in the dependent\n * array. This will return `-Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { max } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @max('values') maxValue // 10\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
              "start": 12415,
              "end": 13011,
              "loc": {
                "start": {
                  "line": 388,
                  "column": 0
                },
                "end": {
                  "line": 407,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.match](http://emberjs.com/api/classes/Ember.computed.html#method_match)\n *\n * A computed property which matches the original value for the dependent\n * property against a given RegExp, returning `true` if they values matches\n * the RegExp and `false` if it does not.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { match } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   email: 'tomster@emberjs.com',\n *\n *   @match('email', /^.+@.+\\..+$/) validEmail\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The property to match\n * @param {RegExp} pattern - The pattern to match against\n ",
            "start": 11599,
            "end": 12292,
            "loc": {
              "start": {
                "line": 364,
                "column": 0
              },
              "end": {
                "line": 385,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.max](http://emberjs.com/api/classes/Ember.computed.html#method_max)\n *\n * A computed property that calculates the maximum value in the dependent\n * array. This will return `-Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { max } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @max('values') maxValue // 10\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
            "start": 12415,
            "end": 13011,
            "loc": {
              "start": {
                "line": 388,
                "column": 0
              },
              "end": {
                "line": 407,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 13012,
        "end": 13126,
        "loc": {
          "start": {
            "line": 408,
            "column": 0
          },
          "end": {
            "line": 408,
            "column": 114
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 13019,
          "end": 13126,
          "loc": {
            "start": {
              "line": 408,
              "column": 7
            },
            "end": {
              "line": 408,
              "column": 114
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 13025,
              "end": 13125,
              "loc": {
                "start": {
                  "line": 408,
                  "column": 13
                },
                "end": {
                  "line": 408,
                  "column": 113
                }
              },
              "id": {
                "type": "Identifier",
                "start": 13025,
                "end": 13028,
                "loc": {
                  "start": {
                    "line": 408,
                    "column": 13
                  },
                  "end": {
                    "line": 408,
                    "column": 16
                  },
                  "identifierName": "max"
                },
                "name": "max",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 13031,
                "end": 13125,
                "loc": {
                  "start": {
                    "line": 408,
                    "column": 19
                  },
                  "end": {
                    "line": 408,
                    "column": 113
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 13031,
                  "end": 13066,
                  "loc": {
                    "start": {
                      "line": 408,
                      "column": 19
                    },
                    "end": {
                      "line": 408,
                      "column": 54
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 13067,
                    "end": 13085,
                    "loc": {
                      "start": {
                        "line": 408,
                        "column": 55
                      },
                      "end": {
                        "line": 408,
                        "column": 73
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 13067,
                      "end": 13081,
                      "loc": {
                        "start": {
                          "line": 408,
                          "column": 55
                        },
                        "end": {
                          "line": 408,
                          "column": 69
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 13067,
                        "end": 13072,
                        "loc": {
                          "start": {
                            "line": 408,
                            "column": 55
                          },
                          "end": {
                            "line": 408,
                            "column": 60
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 13073,
                        "end": 13081,
                        "loc": {
                          "start": {
                            "line": 408,
                            "column": 61
                          },
                          "end": {
                            "line": 408,
                            "column": 69
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 13082,
                      "end": 13085,
                      "loc": {
                        "start": {
                          "line": 408,
                          "column": 70
                        },
                        "end": {
                          "line": 408,
                          "column": 73
                        },
                        "identifierName": "max"
                      },
                      "name": "max"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 13087,
                    "end": 13124,
                    "loc": {
                      "start": {
                        "line": 408,
                        "column": 75
                      },
                      "end": {
                        "line": 408,
                        "column": 112
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `max` without parameters",
                      "raw": "'Cannot use `max` without parameters'"
                    },
                    "value": "Cannot use `max` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.max](http://emberjs.com/api/classes/Ember.computed.html#method_max)\n *\n * A computed property that calculates the maximum value in the dependent\n * array. This will return `-Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { max } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @max('values') maxValue // 10\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
              "start": 12415,
              "end": 13011,
              "loc": {
                "start": {
                  "line": 388,
                  "column": 0
                },
                "end": {
                  "line": 407,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.min](http://emberjs.com/api/classes/Ember.computed.html#method_min)\n *\n * A computed property that calculates the minimum value in the dependent\n * array. This will return `Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { min } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @min('values') minValue // 1\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
              "start": 13128,
              "end": 13722,
              "loc": {
                "start": {
                  "line": 410,
                  "column": 0
                },
                "end": {
                  "line": 429,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.max](http://emberjs.com/api/classes/Ember.computed.html#method_max)\n *\n * A computed property that calculates the maximum value in the dependent\n * array. This will return `-Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { max } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @max('values') maxValue // 10\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
            "start": 12415,
            "end": 13011,
            "loc": {
              "start": {
                "line": 388,
                "column": 0
              },
              "end": {
                "line": 407,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.min](http://emberjs.com/api/classes/Ember.computed.html#method_min)\n *\n * A computed property that calculates the minimum value in the dependent\n * array. This will return `Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { min } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @min('values') minValue // 1\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
            "start": 13128,
            "end": 13722,
            "loc": {
              "start": {
                "line": 410,
                "column": 0
              },
              "end": {
                "line": 429,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 13723,
        "end": 13837,
        "loc": {
          "start": {
            "line": 430,
            "column": 0
          },
          "end": {
            "line": 430,
            "column": 114
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 13730,
          "end": 13837,
          "loc": {
            "start": {
              "line": 430,
              "column": 7
            },
            "end": {
              "line": 430,
              "column": 114
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 13736,
              "end": 13836,
              "loc": {
                "start": {
                  "line": 430,
                  "column": 13
                },
                "end": {
                  "line": 430,
                  "column": 113
                }
              },
              "id": {
                "type": "Identifier",
                "start": 13736,
                "end": 13739,
                "loc": {
                  "start": {
                    "line": 430,
                    "column": 13
                  },
                  "end": {
                    "line": 430,
                    "column": 16
                  },
                  "identifierName": "min"
                },
                "name": "min",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 13742,
                "end": 13836,
                "loc": {
                  "start": {
                    "line": 430,
                    "column": 19
                  },
                  "end": {
                    "line": 430,
                    "column": 113
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 13742,
                  "end": 13777,
                  "loc": {
                    "start": {
                      "line": 430,
                      "column": 19
                    },
                    "end": {
                      "line": 430,
                      "column": 54
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 13778,
                    "end": 13796,
                    "loc": {
                      "start": {
                        "line": 430,
                        "column": 55
                      },
                      "end": {
                        "line": 430,
                        "column": 73
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 13778,
                      "end": 13792,
                      "loc": {
                        "start": {
                          "line": 430,
                          "column": 55
                        },
                        "end": {
                          "line": 430,
                          "column": 69
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 13778,
                        "end": 13783,
                        "loc": {
                          "start": {
                            "line": 430,
                            "column": 55
                          },
                          "end": {
                            "line": 430,
                            "column": 60
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 13784,
                        "end": 13792,
                        "loc": {
                          "start": {
                            "line": 430,
                            "column": 61
                          },
                          "end": {
                            "line": 430,
                            "column": 69
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 13793,
                      "end": 13796,
                      "loc": {
                        "start": {
                          "line": 430,
                          "column": 70
                        },
                        "end": {
                          "line": 430,
                          "column": 73
                        },
                        "identifierName": "min"
                      },
                      "name": "min"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 13798,
                    "end": 13835,
                    "loc": {
                      "start": {
                        "line": 430,
                        "column": 75
                      },
                      "end": {
                        "line": 430,
                        "column": 112
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `min` without parameters",
                      "raw": "'Cannot use `min` without parameters'"
                    },
                    "value": "Cannot use `min` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.min](http://emberjs.com/api/classes/Ember.computed.html#method_min)\n *\n * A computed property that calculates the minimum value in the dependent\n * array. This will return `Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { min } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @min('values') minValue // 1\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
              "start": 13128,
              "end": 13722,
              "loc": {
                "start": {
                  "line": 410,
                  "column": 0
                },
                "end": {
                  "line": 429,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.none](http://emberjs.com/api/classes/Ember.computed.html#method_none)\n *\n * A computed property that returns true if the value of the dependent property\n * is null or undefined. This avoids errors from JSLint complaining about use\n * of `==`, which can be technically confusing.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { none } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   firstName: null,\n *\n *   @none('firstName') isNameless // true until firstName is defined\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
              "start": 13839,
              "end": 14503,
              "loc": {
                "start": {
                  "line": 432,
                  "column": 0
                },
                "end": {
                  "line": 452,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.min](http://emberjs.com/api/classes/Ember.computed.html#method_min)\n *\n * A computed property that calculates the minimum value in the dependent\n * array. This will return `Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { min } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @min('values') minValue // 1\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
            "start": 13128,
            "end": 13722,
            "loc": {
              "start": {
                "line": 410,
                "column": 0
              },
              "end": {
                "line": 429,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.none](http://emberjs.com/api/classes/Ember.computed.html#method_none)\n *\n * A computed property that returns true if the value of the dependent property\n * is null or undefined. This avoids errors from JSLint complaining about use\n * of `==`, which can be technically confusing.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { none } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   firstName: null,\n *\n *   @none('firstName') isNameless // true until firstName is defined\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
            "start": 13839,
            "end": 14503,
            "loc": {
              "start": {
                "line": 432,
                "column": 0
              },
              "end": {
                "line": 452,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 14504,
        "end": 14621,
        "loc": {
          "start": {
            "line": 453,
            "column": 0
          },
          "end": {
            "line": 453,
            "column": 117
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 14511,
          "end": 14621,
          "loc": {
            "start": {
              "line": 453,
              "column": 7
            },
            "end": {
              "line": 453,
              "column": 117
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 14517,
              "end": 14620,
              "loc": {
                "start": {
                  "line": 453,
                  "column": 13
                },
                "end": {
                  "line": 453,
                  "column": 116
                }
              },
              "id": {
                "type": "Identifier",
                "start": 14517,
                "end": 14521,
                "loc": {
                  "start": {
                    "line": 453,
                    "column": 13
                  },
                  "end": {
                    "line": 453,
                    "column": 17
                  },
                  "identifierName": "none"
                },
                "name": "none",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 14524,
                "end": 14620,
                "loc": {
                  "start": {
                    "line": 453,
                    "column": 20
                  },
                  "end": {
                    "line": 453,
                    "column": 116
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 14524,
                  "end": 14559,
                  "loc": {
                    "start": {
                      "line": 453,
                      "column": 20
                    },
                    "end": {
                      "line": 453,
                      "column": 55
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 14560,
                    "end": 14579,
                    "loc": {
                      "start": {
                        "line": 453,
                        "column": 56
                      },
                      "end": {
                        "line": 453,
                        "column": 75
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 14560,
                      "end": 14574,
                      "loc": {
                        "start": {
                          "line": 453,
                          "column": 56
                        },
                        "end": {
                          "line": 453,
                          "column": 70
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 14560,
                        "end": 14565,
                        "loc": {
                          "start": {
                            "line": 453,
                            "column": 56
                          },
                          "end": {
                            "line": 453,
                            "column": 61
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 14566,
                        "end": 14574,
                        "loc": {
                          "start": {
                            "line": 453,
                            "column": 62
                          },
                          "end": {
                            "line": 453,
                            "column": 70
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 14575,
                      "end": 14579,
                      "loc": {
                        "start": {
                          "line": 453,
                          "column": 71
                        },
                        "end": {
                          "line": 453,
                          "column": 75
                        },
                        "identifierName": "none"
                      },
                      "name": "none"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 14581,
                    "end": 14619,
                    "loc": {
                      "start": {
                        "line": 453,
                        "column": 77
                      },
                      "end": {
                        "line": 453,
                        "column": 115
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `none` without parameters",
                      "raw": "'Cannot use `none` without parameters'"
                    },
                    "value": "Cannot use `none` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.none](http://emberjs.com/api/classes/Ember.computed.html#method_none)\n *\n * A computed property that returns true if the value of the dependent property\n * is null or undefined. This avoids errors from JSLint complaining about use\n * of `==`, which can be technically confusing.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { none } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   firstName: null,\n *\n *   @none('firstName') isNameless // true until firstName is defined\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
              "start": 13839,
              "end": 14503,
              "loc": {
                "start": {
                  "line": 432,
                  "column": 0
                },
                "end": {
                  "line": 452,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.not](http://emberjs.com/api/classes/Ember.computed.html#method_not)\n *\n * A computed property that returns the inverse boolean value of the original\n * value for the dependent property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { not } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   loggedIn: false,\n *\n *   @not('loggedIn') isAnonymous // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to `not`\n ",
              "start": 14623,
              "end": 15165,
              "loc": {
                "start": {
                  "line": 455,
                  "column": 0
                },
                "end": {
                  "line": 474,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.none](http://emberjs.com/api/classes/Ember.computed.html#method_none)\n *\n * A computed property that returns true if the value of the dependent property\n * is null or undefined. This avoids errors from JSLint complaining about use\n * of `==`, which can be technically confusing.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { none } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   firstName: null,\n *\n *   @none('firstName') isNameless // true until firstName is defined\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
            "start": 13839,
            "end": 14503,
            "loc": {
              "start": {
                "line": 432,
                "column": 0
              },
              "end": {
                "line": 452,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.not](http://emberjs.com/api/classes/Ember.computed.html#method_not)\n *\n * A computed property that returns the inverse boolean value of the original\n * value for the dependent property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { not } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   loggedIn: false,\n *\n *   @not('loggedIn') isAnonymous // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to `not`\n ",
            "start": 14623,
            "end": 15165,
            "loc": {
              "start": {
                "line": 455,
                "column": 0
              },
              "end": {
                "line": 474,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 15166,
        "end": 15280,
        "loc": {
          "start": {
            "line": 475,
            "column": 0
          },
          "end": {
            "line": 475,
            "column": 114
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 15173,
          "end": 15280,
          "loc": {
            "start": {
              "line": 475,
              "column": 7
            },
            "end": {
              "line": 475,
              "column": 114
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 15179,
              "end": 15279,
              "loc": {
                "start": {
                  "line": 475,
                  "column": 13
                },
                "end": {
                  "line": 475,
                  "column": 113
                }
              },
              "id": {
                "type": "Identifier",
                "start": 15179,
                "end": 15182,
                "loc": {
                  "start": {
                    "line": 475,
                    "column": 13
                  },
                  "end": {
                    "line": 475,
                    "column": 16
                  },
                  "identifierName": "not"
                },
                "name": "not",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 15185,
                "end": 15279,
                "loc": {
                  "start": {
                    "line": 475,
                    "column": 19
                  },
                  "end": {
                    "line": 475,
                    "column": 113
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 15185,
                  "end": 15220,
                  "loc": {
                    "start": {
                      "line": 475,
                      "column": 19
                    },
                    "end": {
                      "line": 475,
                      "column": 54
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 15221,
                    "end": 15239,
                    "loc": {
                      "start": {
                        "line": 475,
                        "column": 55
                      },
                      "end": {
                        "line": 475,
                        "column": 73
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 15221,
                      "end": 15235,
                      "loc": {
                        "start": {
                          "line": 475,
                          "column": 55
                        },
                        "end": {
                          "line": 475,
                          "column": 69
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 15221,
                        "end": 15226,
                        "loc": {
                          "start": {
                            "line": 475,
                            "column": 55
                          },
                          "end": {
                            "line": 475,
                            "column": 60
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 15227,
                        "end": 15235,
                        "loc": {
                          "start": {
                            "line": 475,
                            "column": 61
                          },
                          "end": {
                            "line": 475,
                            "column": 69
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 15236,
                      "end": 15239,
                      "loc": {
                        "start": {
                          "line": 475,
                          "column": 70
                        },
                        "end": {
                          "line": 475,
                          "column": 73
                        },
                        "identifierName": "not"
                      },
                      "name": "not"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 15241,
                    "end": 15278,
                    "loc": {
                      "start": {
                        "line": 475,
                        "column": 75
                      },
                      "end": {
                        "line": 475,
                        "column": 112
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `not` without parameters",
                      "raw": "'Cannot use `not` without parameters'"
                    },
                    "value": "Cannot use `not` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.not](http://emberjs.com/api/classes/Ember.computed.html#method_not)\n *\n * A computed property that returns the inverse boolean value of the original\n * value for the dependent property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { not } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   loggedIn: false,\n *\n *   @not('loggedIn') isAnonymous // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to `not`\n ",
              "start": 14623,
              "end": 15165,
              "loc": {
                "start": {
                  "line": 455,
                  "column": 0
                },
                "end": {
                  "line": 474,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.notEmpty](http://emberjs.com/api/classes/Ember.computed.html#method_notEmpty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is NOT null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { notEmpty } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   groceryBag: Ember.A(['milk', 'eggs', 'apples']),\n *\n *   @notEmpty('groceryBag') hasGroceriesToPutAway // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
              "start": 15282,
              "end": 15920,
              "loc": {
                "start": {
                  "line": 477,
                  "column": 0
                },
                "end": {
                  "line": 496,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.not](http://emberjs.com/api/classes/Ember.computed.html#method_not)\n *\n * A computed property that returns the inverse boolean value of the original\n * value for the dependent property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { not } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   loggedIn: false,\n *\n *   @not('loggedIn') isAnonymous // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to `not`\n ",
            "start": 14623,
            "end": 15165,
            "loc": {
              "start": {
                "line": 455,
                "column": 0
              },
              "end": {
                "line": 474,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.notEmpty](http://emberjs.com/api/classes/Ember.computed.html#method_notEmpty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is NOT null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { notEmpty } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   groceryBag: Ember.A(['milk', 'eggs', 'apples']),\n *\n *   @notEmpty('groceryBag') hasGroceriesToPutAway // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
            "start": 15282,
            "end": 15920,
            "loc": {
              "start": {
                "line": 477,
                "column": 0
              },
              "end": {
                "line": 496,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 15921,
        "end": 16050,
        "loc": {
          "start": {
            "line": 497,
            "column": 0
          },
          "end": {
            "line": 497,
            "column": 129
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 15928,
          "end": 16050,
          "loc": {
            "start": {
              "line": 497,
              "column": 7
            },
            "end": {
              "line": 497,
              "column": 129
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 15934,
              "end": 16049,
              "loc": {
                "start": {
                  "line": 497,
                  "column": 13
                },
                "end": {
                  "line": 497,
                  "column": 128
                }
              },
              "id": {
                "type": "Identifier",
                "start": 15934,
                "end": 15942,
                "loc": {
                  "start": {
                    "line": 497,
                    "column": 13
                  },
                  "end": {
                    "line": 497,
                    "column": 21
                  },
                  "identifierName": "notEmpty"
                },
                "name": "notEmpty",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 15945,
                "end": 16049,
                "loc": {
                  "start": {
                    "line": 497,
                    "column": 24
                  },
                  "end": {
                    "line": 497,
                    "column": 128
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 15945,
                  "end": 15980,
                  "loc": {
                    "start": {
                      "line": 497,
                      "column": 24
                    },
                    "end": {
                      "line": 497,
                      "column": 59
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 15981,
                    "end": 16004,
                    "loc": {
                      "start": {
                        "line": 497,
                        "column": 60
                      },
                      "end": {
                        "line": 497,
                        "column": 83
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 15981,
                      "end": 15995,
                      "loc": {
                        "start": {
                          "line": 497,
                          "column": 60
                        },
                        "end": {
                          "line": 497,
                          "column": 74
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 15981,
                        "end": 15986,
                        "loc": {
                          "start": {
                            "line": 497,
                            "column": 60
                          },
                          "end": {
                            "line": 497,
                            "column": 65
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 15987,
                        "end": 15995,
                        "loc": {
                          "start": {
                            "line": 497,
                            "column": 66
                          },
                          "end": {
                            "line": 497,
                            "column": 74
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 15996,
                      "end": 16004,
                      "loc": {
                        "start": {
                          "line": 497,
                          "column": 75
                        },
                        "end": {
                          "line": 497,
                          "column": 83
                        },
                        "identifierName": "notEmpty"
                      },
                      "name": "notEmpty"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 16006,
                    "end": 16048,
                    "loc": {
                      "start": {
                        "line": 497,
                        "column": 85
                      },
                      "end": {
                        "line": 497,
                        "column": 127
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `notEmpty` without parameters",
                      "raw": "'Cannot use `notEmpty` without parameters'"
                    },
                    "value": "Cannot use `notEmpty` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.notEmpty](http://emberjs.com/api/classes/Ember.computed.html#method_notEmpty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is NOT null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { notEmpty } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   groceryBag: Ember.A(['milk', 'eggs', 'apples']),\n *\n *   @notEmpty('groceryBag') hasGroceriesToPutAway // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
              "start": 15282,
              "end": 15920,
              "loc": {
                "start": {
                  "line": 477,
                  "column": 0
                },
                "end": {
                  "line": 496,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.oneWay](http://emberjs.com/api/classes/Ember.computed.html#method_oneWay)\n *\n * Where `computed.alias` aliases `get` and `set`, and allows for bidirectional\n * data flow, `computed.oneWay` only provides an aliased `get`. The `set` will\n * not mutate the upstream property, rather causes the current property to\n * become the value set. This causes the downstream property to permanently\n * diverge from the upstream property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { oneWay } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   firstName: 'Joe',\n *\n *   @oneWay('firstName') originalName // will always be 'Joe'\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to alias\n ",
              "start": 16052,
              "end": 16859,
              "loc": {
                "start": {
                  "line": 499,
                  "column": 0
                },
                "end": {
                  "line": 521,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.notEmpty](http://emberjs.com/api/classes/Ember.computed.html#method_notEmpty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is NOT null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { notEmpty } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   groceryBag: Ember.A(['milk', 'eggs', 'apples']),\n *\n *   @notEmpty('groceryBag') hasGroceriesToPutAway // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
            "start": 15282,
            "end": 15920,
            "loc": {
              "start": {
                "line": 477,
                "column": 0
              },
              "end": {
                "line": 496,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.oneWay](http://emberjs.com/api/classes/Ember.computed.html#method_oneWay)\n *\n * Where `computed.alias` aliases `get` and `set`, and allows for bidirectional\n * data flow, `computed.oneWay` only provides an aliased `get`. The `set` will\n * not mutate the upstream property, rather causes the current property to\n * become the value set. This causes the downstream property to permanently\n * diverge from the upstream property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { oneWay } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   firstName: 'Joe',\n *\n *   @oneWay('firstName') originalName // will always be 'Joe'\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to alias\n ",
            "start": 16052,
            "end": 16859,
            "loc": {
              "start": {
                "line": 499,
                "column": 0
              },
              "end": {
                "line": 521,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 16860,
        "end": 16983,
        "loc": {
          "start": {
            "line": 522,
            "column": 0
          },
          "end": {
            "line": 522,
            "column": 123
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 16867,
          "end": 16983,
          "loc": {
            "start": {
              "line": 522,
              "column": 7
            },
            "end": {
              "line": 522,
              "column": 123
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 16873,
              "end": 16982,
              "loc": {
                "start": {
                  "line": 522,
                  "column": 13
                },
                "end": {
                  "line": 522,
                  "column": 122
                }
              },
              "id": {
                "type": "Identifier",
                "start": 16873,
                "end": 16879,
                "loc": {
                  "start": {
                    "line": 522,
                    "column": 13
                  },
                  "end": {
                    "line": 522,
                    "column": 19
                  },
                  "identifierName": "oneWay"
                },
                "name": "oneWay",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 16882,
                "end": 16982,
                "loc": {
                  "start": {
                    "line": 522,
                    "column": 22
                  },
                  "end": {
                    "line": 522,
                    "column": 122
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 16882,
                  "end": 16917,
                  "loc": {
                    "start": {
                      "line": 522,
                      "column": 22
                    },
                    "end": {
                      "line": 522,
                      "column": 57
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 16918,
                    "end": 16939,
                    "loc": {
                      "start": {
                        "line": 522,
                        "column": 58
                      },
                      "end": {
                        "line": 522,
                        "column": 79
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 16918,
                      "end": 16932,
                      "loc": {
                        "start": {
                          "line": 522,
                          "column": 58
                        },
                        "end": {
                          "line": 522,
                          "column": 72
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 16918,
                        "end": 16923,
                        "loc": {
                          "start": {
                            "line": 522,
                            "column": 58
                          },
                          "end": {
                            "line": 522,
                            "column": 63
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 16924,
                        "end": 16932,
                        "loc": {
                          "start": {
                            "line": 522,
                            "column": 64
                          },
                          "end": {
                            "line": 522,
                            "column": 72
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 16933,
                      "end": 16939,
                      "loc": {
                        "start": {
                          "line": 522,
                          "column": 73
                        },
                        "end": {
                          "line": 522,
                          "column": 79
                        },
                        "identifierName": "oneWay"
                      },
                      "name": "oneWay"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 16941,
                    "end": 16981,
                    "loc": {
                      "start": {
                        "line": 522,
                        "column": 81
                      },
                      "end": {
                        "line": 522,
                        "column": 121
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `oneWay` without parameters",
                      "raw": "'Cannot use `oneWay` without parameters'"
                    },
                    "value": "Cannot use `oneWay` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.oneWay](http://emberjs.com/api/classes/Ember.computed.html#method_oneWay)\n *\n * Where `computed.alias` aliases `get` and `set`, and allows for bidirectional\n * data flow, `computed.oneWay` only provides an aliased `get`. The `set` will\n * not mutate the upstream property, rather causes the current property to\n * become the value set. This causes the downstream property to permanently\n * diverge from the upstream property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { oneWay } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   firstName: 'Joe',\n *\n *   @oneWay('firstName') originalName // will always be 'Joe'\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to alias\n ",
              "start": 16052,
              "end": 16859,
              "loc": {
                "start": {
                  "line": 499,
                  "column": 0
                },
                "end": {
                  "line": 521,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.or](http://emberjs.com/api/classes/Ember.computed.html#method_or)\n *\n * A computed property which performs a logical or on the original values for\n * the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { or } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   hasJacket: true,\n *   hasUmbrella: false,\n *\n *   @or('hasJacket', 'hasUmbrella') isReadyForRain // true\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKey - Key for the properties to `or`\n ",
              "start": 16985,
              "end": 17572,
              "loc": {
                "start": {
                  "line": 524,
                  "column": 0
                },
                "end": {
                  "line": 544,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.oneWay](http://emberjs.com/api/classes/Ember.computed.html#method_oneWay)\n *\n * Where `computed.alias` aliases `get` and `set`, and allows for bidirectional\n * data flow, `computed.oneWay` only provides an aliased `get`. The `set` will\n * not mutate the upstream property, rather causes the current property to\n * become the value set. This causes the downstream property to permanently\n * diverge from the upstream property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { oneWay } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   firstName: 'Joe',\n *\n *   @oneWay('firstName') originalName // will always be 'Joe'\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to alias\n ",
            "start": 16052,
            "end": 16859,
            "loc": {
              "start": {
                "line": 499,
                "column": 0
              },
              "end": {
                "line": 521,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.or](http://emberjs.com/api/classes/Ember.computed.html#method_or)\n *\n * A computed property which performs a logical or on the original values for\n * the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { or } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   hasJacket: true,\n *   hasUmbrella: false,\n *\n *   @or('hasJacket', 'hasUmbrella') isReadyForRain // true\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKey - Key for the properties to `or`\n ",
            "start": 16985,
            "end": 17572,
            "loc": {
              "start": {
                "line": 524,
                "column": 0
              },
              "end": {
                "line": 544,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 17573,
        "end": 17684,
        "loc": {
          "start": {
            "line": 545,
            "column": 0
          },
          "end": {
            "line": 545,
            "column": 111
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 17580,
          "end": 17684,
          "loc": {
            "start": {
              "line": 545,
              "column": 7
            },
            "end": {
              "line": 545,
              "column": 111
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 17586,
              "end": 17683,
              "loc": {
                "start": {
                  "line": 545,
                  "column": 13
                },
                "end": {
                  "line": 545,
                  "column": 110
                }
              },
              "id": {
                "type": "Identifier",
                "start": 17586,
                "end": 17588,
                "loc": {
                  "start": {
                    "line": 545,
                    "column": 13
                  },
                  "end": {
                    "line": 545,
                    "column": 15
                  },
                  "identifierName": "or"
                },
                "name": "or",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 17591,
                "end": 17683,
                "loc": {
                  "start": {
                    "line": 545,
                    "column": 18
                  },
                  "end": {
                    "line": 545,
                    "column": 110
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 17591,
                  "end": 17626,
                  "loc": {
                    "start": {
                      "line": 545,
                      "column": 18
                    },
                    "end": {
                      "line": 545,
                      "column": 53
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 17627,
                    "end": 17644,
                    "loc": {
                      "start": {
                        "line": 545,
                        "column": 54
                      },
                      "end": {
                        "line": 545,
                        "column": 71
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 17627,
                      "end": 17641,
                      "loc": {
                        "start": {
                          "line": 545,
                          "column": 54
                        },
                        "end": {
                          "line": 545,
                          "column": 68
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 17627,
                        "end": 17632,
                        "loc": {
                          "start": {
                            "line": 545,
                            "column": 54
                          },
                          "end": {
                            "line": 545,
                            "column": 59
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 17633,
                        "end": 17641,
                        "loc": {
                          "start": {
                            "line": 545,
                            "column": 60
                          },
                          "end": {
                            "line": 545,
                            "column": 68
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 17642,
                      "end": 17644,
                      "loc": {
                        "start": {
                          "line": 545,
                          "column": 69
                        },
                        "end": {
                          "line": 545,
                          "column": 71
                        },
                        "identifierName": "or"
                      },
                      "name": "or"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 17646,
                    "end": 17682,
                    "loc": {
                      "start": {
                        "line": 545,
                        "column": 73
                      },
                      "end": {
                        "line": 545,
                        "column": 109
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `or` without parameters",
                      "raw": "'Cannot use `or` without parameters'"
                    },
                    "value": "Cannot use `or` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.or](http://emberjs.com/api/classes/Ember.computed.html#method_or)\n *\n * A computed property which performs a logical or on the original values for\n * the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { or } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   hasJacket: true,\n *   hasUmbrella: false,\n *\n *   @or('hasJacket', 'hasUmbrella') isReadyForRain // true\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKey - Key for the properties to `or`\n ",
              "start": 16985,
              "end": 17572,
              "loc": {
                "start": {
                  "line": 524,
                  "column": 0
                },
                "end": {
                  "line": 544,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.reads](http://emberjs.com/api/classes/Ember.computed.html#method_reads)\n *\n * This is a more semantically meaningful alias of `computed.oneWay`, whose\n * name is somewhat ambiguous as to which direction the data flows.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { reads } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   @reads('first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to read\n ",
              "start": 17686,
              "end": 18226,
              "loc": {
                "start": {
                  "line": 547,
                  "column": 0
                },
                "end": {
                  "line": 564,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.or](http://emberjs.com/api/classes/Ember.computed.html#method_or)\n *\n * A computed property which performs a logical or on the original values for\n * the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { or } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   hasJacket: true,\n *   hasUmbrella: false,\n *\n *   @or('hasJacket', 'hasUmbrella') isReadyForRain // true\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKey - Key for the properties to `or`\n ",
            "start": 16985,
            "end": 17572,
            "loc": {
              "start": {
                "line": 524,
                "column": 0
              },
              "end": {
                "line": 544,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.reads](http://emberjs.com/api/classes/Ember.computed.html#method_reads)\n *\n * This is a more semantically meaningful alias of `computed.oneWay`, whose\n * name is somewhat ambiguous as to which direction the data flows.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { reads } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   @reads('first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to read\n ",
            "start": 17686,
            "end": 18226,
            "loc": {
              "start": {
                "line": 547,
                "column": 0
              },
              "end": {
                "line": 564,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 18227,
        "end": 18347,
        "loc": {
          "start": {
            "line": 565,
            "column": 0
          },
          "end": {
            "line": 565,
            "column": 120
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 18234,
          "end": 18347,
          "loc": {
            "start": {
              "line": 565,
              "column": 7
            },
            "end": {
              "line": 565,
              "column": 120
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 18240,
              "end": 18346,
              "loc": {
                "start": {
                  "line": 565,
                  "column": 13
                },
                "end": {
                  "line": 565,
                  "column": 119
                }
              },
              "id": {
                "type": "Identifier",
                "start": 18240,
                "end": 18245,
                "loc": {
                  "start": {
                    "line": 565,
                    "column": 13
                  },
                  "end": {
                    "line": 565,
                    "column": 18
                  },
                  "identifierName": "reads"
                },
                "name": "reads",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 18248,
                "end": 18346,
                "loc": {
                  "start": {
                    "line": 565,
                    "column": 21
                  },
                  "end": {
                    "line": 565,
                    "column": 119
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 18248,
                  "end": 18283,
                  "loc": {
                    "start": {
                      "line": 565,
                      "column": 21
                    },
                    "end": {
                      "line": 565,
                      "column": 56
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 18284,
                    "end": 18304,
                    "loc": {
                      "start": {
                        "line": 565,
                        "column": 57
                      },
                      "end": {
                        "line": 565,
                        "column": 77
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 18284,
                      "end": 18298,
                      "loc": {
                        "start": {
                          "line": 565,
                          "column": 57
                        },
                        "end": {
                          "line": 565,
                          "column": 71
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 18284,
                        "end": 18289,
                        "loc": {
                          "start": {
                            "line": 565,
                            "column": 57
                          },
                          "end": {
                            "line": 565,
                            "column": 62
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 18290,
                        "end": 18298,
                        "loc": {
                          "start": {
                            "line": 565,
                            "column": 63
                          },
                          "end": {
                            "line": 565,
                            "column": 71
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 18299,
                      "end": 18304,
                      "loc": {
                        "start": {
                          "line": 565,
                          "column": 72
                        },
                        "end": {
                          "line": 565,
                          "column": 77
                        },
                        "identifierName": "reads"
                      },
                      "name": "reads"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 18306,
                    "end": 18345,
                    "loc": {
                      "start": {
                        "line": 565,
                        "column": 79
                      },
                      "end": {
                        "line": 565,
                        "column": 118
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `reads` without parameters",
                      "raw": "'Cannot use `reads` without parameters'"
                    },
                    "value": "Cannot use `reads` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.reads](http://emberjs.com/api/classes/Ember.computed.html#method_reads)\n *\n * This is a more semantically meaningful alias of `computed.oneWay`, whose\n * name is somewhat ambiguous as to which direction the data flows.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { reads } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   @reads('first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to read\n ",
              "start": 17686,
              "end": 18226,
              "loc": {
                "start": {
                  "line": 547,
                  "column": 0
                },
                "end": {
                  "line": 564,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.setDiff](http://emberjs.com/api/classes/Ember.computed.html#method_setDiff)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array that are not in the second dependent array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { setDiff } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @setDiff('likes', 'foods') favoriteThingsThatArentFood // ['puppies']\n * });\n * ```\n *\n * @function\n * @param {String} setAProperty - Keys for the first set\n * @param {String} setBProperty - Keys for the first set\n ",
              "start": 18349,
              "end": 19095,
              "loc": {
                "start": {
                  "line": 567,
                  "column": 0
                },
                "end": {
                  "line": 588,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.reads](http://emberjs.com/api/classes/Ember.computed.html#method_reads)\n *\n * This is a more semantically meaningful alias of `computed.oneWay`, whose\n * name is somewhat ambiguous as to which direction the data flows.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { reads } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   @reads('first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to read\n ",
            "start": 17686,
            "end": 18226,
            "loc": {
              "start": {
                "line": 547,
                "column": 0
              },
              "end": {
                "line": 564,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.setDiff](http://emberjs.com/api/classes/Ember.computed.html#method_setDiff)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array that are not in the second dependent array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { setDiff } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @setDiff('likes', 'foods') favoriteThingsThatArentFood // ['puppies']\n * });\n * ```\n *\n * @function\n * @param {String} setAProperty - Keys for the first set\n * @param {String} setBProperty - Keys for the first set\n ",
            "start": 18349,
            "end": 19095,
            "loc": {
              "start": {
                "line": 567,
                "column": 0
              },
              "end": {
                "line": 588,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 19096,
        "end": 19222,
        "loc": {
          "start": {
            "line": 589,
            "column": 0
          },
          "end": {
            "line": 589,
            "column": 126
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 19103,
          "end": 19222,
          "loc": {
            "start": {
              "line": 589,
              "column": 7
            },
            "end": {
              "line": 589,
              "column": 126
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 19109,
              "end": 19221,
              "loc": {
                "start": {
                  "line": 589,
                  "column": 13
                },
                "end": {
                  "line": 589,
                  "column": 125
                }
              },
              "id": {
                "type": "Identifier",
                "start": 19109,
                "end": 19116,
                "loc": {
                  "start": {
                    "line": 589,
                    "column": 13
                  },
                  "end": {
                    "line": 589,
                    "column": 20
                  },
                  "identifierName": "setDiff"
                },
                "name": "setDiff",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 19119,
                "end": 19221,
                "loc": {
                  "start": {
                    "line": 589,
                    "column": 23
                  },
                  "end": {
                    "line": 589,
                    "column": 125
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 19119,
                  "end": 19154,
                  "loc": {
                    "start": {
                      "line": 589,
                      "column": 23
                    },
                    "end": {
                      "line": 589,
                      "column": 58
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 19155,
                    "end": 19177,
                    "loc": {
                      "start": {
                        "line": 589,
                        "column": 59
                      },
                      "end": {
                        "line": 589,
                        "column": 81
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 19155,
                      "end": 19169,
                      "loc": {
                        "start": {
                          "line": 589,
                          "column": 59
                        },
                        "end": {
                          "line": 589,
                          "column": 73
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 19155,
                        "end": 19160,
                        "loc": {
                          "start": {
                            "line": 589,
                            "column": 59
                          },
                          "end": {
                            "line": 589,
                            "column": 64
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 19161,
                        "end": 19169,
                        "loc": {
                          "start": {
                            "line": 589,
                            "column": 65
                          },
                          "end": {
                            "line": 589,
                            "column": 73
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 19170,
                      "end": 19177,
                      "loc": {
                        "start": {
                          "line": 589,
                          "column": 74
                        },
                        "end": {
                          "line": 589,
                          "column": 81
                        },
                        "identifierName": "setDiff"
                      },
                      "name": "setDiff"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 19179,
                    "end": 19220,
                    "loc": {
                      "start": {
                        "line": 589,
                        "column": 83
                      },
                      "end": {
                        "line": 589,
                        "column": 124
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `setDiff` without parameters",
                      "raw": "'Cannot use `setDiff` without parameters'"
                    },
                    "value": "Cannot use `setDiff` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.setDiff](http://emberjs.com/api/classes/Ember.computed.html#method_setDiff)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array that are not in the second dependent array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { setDiff } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @setDiff('likes', 'foods') favoriteThingsThatArentFood // ['puppies']\n * });\n * ```\n *\n * @function\n * @param {String} setAProperty - Keys for the first set\n * @param {String} setBProperty - Keys for the first set\n ",
              "start": 18349,
              "end": 19095,
              "loc": {
                "start": {
                  "line": 567,
                  "column": 0
                },
                "end": {
                  "line": 588,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.sort](http://emberjs.com/api/classes/Ember.computed.html#method_sort)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array sorted based on a property or sort function.\n *\n *\n * The callback method you provide should have the following signature:\n *\n * ```javascript\n * function(itemA, itemB);\n * ```\n * - `itemA` the first item to compare.\n * - `itemB` the second item to compare.\n *\n * This function should return negative number (e.g. `-1`) when `itemA` should\n * come before `itemB`. It should return positive number (e.g. `1`) when\n * `itemA` should come after `itemB`. If the `itemA` and `itemB` are equal this\n * function should return `0`.\n *\n * Therefore, if this function is comparing some numeric values, simple\n * `itemA - itemB` or `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used\n * instead of series of `if`.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sort } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   this.names = Ember.A([{name:'Link'},{name:'Zelda'},{name:'Ganon'},{name:'Navi'}]);\n *   @sort('names', function(a, b){\n *     if (a.name > b.name) {\n *       return 1;\n *     } else if (a.name < b.name) {\n *       return -1;\n *     }\n *\n *     return 0;\n *   }) sortedNames // [{name:'Ganon'},{name:'Link'},{name:'Navi'},{name:'Zelda'}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The key for the array that should be sorted\n * @param {Array<String>|Function(Any, Any): Number} sortDefinition - Sorting function or sort descriptor\n ",
              "start": 19224,
              "end": 20861,
              "loc": {
                "start": {
                  "line": 591,
                  "column": 0
                },
                "end": {
                  "line": 636,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.setDiff](http://emberjs.com/api/classes/Ember.computed.html#method_setDiff)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array that are not in the second dependent array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { setDiff } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @setDiff('likes', 'foods') favoriteThingsThatArentFood // ['puppies']\n * });\n * ```\n *\n * @function\n * @param {String} setAProperty - Keys for the first set\n * @param {String} setBProperty - Keys for the first set\n ",
            "start": 18349,
            "end": 19095,
            "loc": {
              "start": {
                "line": 567,
                "column": 0
              },
              "end": {
                "line": 588,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.sort](http://emberjs.com/api/classes/Ember.computed.html#method_sort)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array sorted based on a property or sort function.\n *\n *\n * The callback method you provide should have the following signature:\n *\n * ```javascript\n * function(itemA, itemB);\n * ```\n * - `itemA` the first item to compare.\n * - `itemB` the second item to compare.\n *\n * This function should return negative number (e.g. `-1`) when `itemA` should\n * come before `itemB`. It should return positive number (e.g. `1`) when\n * `itemA` should come after `itemB`. If the `itemA` and `itemB` are equal this\n * function should return `0`.\n *\n * Therefore, if this function is comparing some numeric values, simple\n * `itemA - itemB` or `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used\n * instead of series of `if`.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sort } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   this.names = Ember.A([{name:'Link'},{name:'Zelda'},{name:'Ganon'},{name:'Navi'}]);\n *   @sort('names', function(a, b){\n *     if (a.name > b.name) {\n *       return 1;\n *     } else if (a.name < b.name) {\n *       return -1;\n *     }\n *\n *     return 0;\n *   }) sortedNames // [{name:'Ganon'},{name:'Link'},{name:'Navi'},{name:'Zelda'}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The key for the array that should be sorted\n * @param {Array<String>|Function(Any, Any): Number} sortDefinition - Sorting function or sort descriptor\n ",
            "start": 19224,
            "end": 20861,
            "loc": {
              "start": {
                "line": 591,
                "column": 0
              },
              "end": {
                "line": 636,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 20862,
        "end": 20979,
        "loc": {
          "start": {
            "line": 637,
            "column": 0
          },
          "end": {
            "line": 637,
            "column": 117
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 20869,
          "end": 20979,
          "loc": {
            "start": {
              "line": 637,
              "column": 7
            },
            "end": {
              "line": 637,
              "column": 117
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 20875,
              "end": 20978,
              "loc": {
                "start": {
                  "line": 637,
                  "column": 13
                },
                "end": {
                  "line": 637,
                  "column": 116
                }
              },
              "id": {
                "type": "Identifier",
                "start": 20875,
                "end": 20879,
                "loc": {
                  "start": {
                    "line": 637,
                    "column": 13
                  },
                  "end": {
                    "line": 637,
                    "column": 17
                  },
                  "identifierName": "sort"
                },
                "name": "sort",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 20882,
                "end": 20978,
                "loc": {
                  "start": {
                    "line": 637,
                    "column": 20
                  },
                  "end": {
                    "line": 637,
                    "column": 116
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 20882,
                  "end": 20917,
                  "loc": {
                    "start": {
                      "line": 637,
                      "column": 20
                    },
                    "end": {
                      "line": 637,
                      "column": 55
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 20918,
                    "end": 20937,
                    "loc": {
                      "start": {
                        "line": 637,
                        "column": 56
                      },
                      "end": {
                        "line": 637,
                        "column": 75
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 20918,
                      "end": 20932,
                      "loc": {
                        "start": {
                          "line": 637,
                          "column": 56
                        },
                        "end": {
                          "line": 637,
                          "column": 70
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 20918,
                        "end": 20923,
                        "loc": {
                          "start": {
                            "line": 637,
                            "column": 56
                          },
                          "end": {
                            "line": 637,
                            "column": 61
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 20924,
                        "end": 20932,
                        "loc": {
                          "start": {
                            "line": 637,
                            "column": 62
                          },
                          "end": {
                            "line": 637,
                            "column": 70
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 20933,
                      "end": 20937,
                      "loc": {
                        "start": {
                          "line": 637,
                          "column": 71
                        },
                        "end": {
                          "line": 637,
                          "column": 75
                        },
                        "identifierName": "sort"
                      },
                      "name": "sort"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 20939,
                    "end": 20977,
                    "loc": {
                      "start": {
                        "line": 637,
                        "column": 77
                      },
                      "end": {
                        "line": 637,
                        "column": 115
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `sort` without parameters",
                      "raw": "'Cannot use `sort` without parameters'"
                    },
                    "value": "Cannot use `sort` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.sort](http://emberjs.com/api/classes/Ember.computed.html#method_sort)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array sorted based on a property or sort function.\n *\n *\n * The callback method you provide should have the following signature:\n *\n * ```javascript\n * function(itemA, itemB);\n * ```\n * - `itemA` the first item to compare.\n * - `itemB` the second item to compare.\n *\n * This function should return negative number (e.g. `-1`) when `itemA` should\n * come before `itemB`. It should return positive number (e.g. `1`) when\n * `itemA` should come after `itemB`. If the `itemA` and `itemB` are equal this\n * function should return `0`.\n *\n * Therefore, if this function is comparing some numeric values, simple\n * `itemA - itemB` or `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used\n * instead of series of `if`.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sort } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   this.names = Ember.A([{name:'Link'},{name:'Zelda'},{name:'Ganon'},{name:'Navi'}]);\n *   @sort('names', function(a, b){\n *     if (a.name > b.name) {\n *       return 1;\n *     } else if (a.name < b.name) {\n *       return -1;\n *     }\n *\n *     return 0;\n *   }) sortedNames // [{name:'Ganon'},{name:'Link'},{name:'Navi'},{name:'Zelda'}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The key for the array that should be sorted\n * @param {Array<String>|Function(Any, Any): Number} sortDefinition - Sorting function or sort descriptor\n ",
              "start": 19224,
              "end": 20861,
              "loc": {
                "start": {
                  "line": 591,
                  "column": 0
                },
                "end": {
                  "line": 636,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.sum](http://emberjs.com/api/classes/Ember.computed.html#method_sum)\n *\n * A computed property that returns the sum of the value in the dependent\n * array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sum } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 3]),\n *\n *   @sum('values') total // 6\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to sum up\n ",
              "start": 20981,
              "end": 21489,
              "loc": {
                "start": {
                  "line": 639,
                  "column": 0
                },
                "end": {
                  "line": 658,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.sort](http://emberjs.com/api/classes/Ember.computed.html#method_sort)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array sorted based on a property or sort function.\n *\n *\n * The callback method you provide should have the following signature:\n *\n * ```javascript\n * function(itemA, itemB);\n * ```\n * - `itemA` the first item to compare.\n * - `itemB` the second item to compare.\n *\n * This function should return negative number (e.g. `-1`) when `itemA` should\n * come before `itemB`. It should return positive number (e.g. `1`) when\n * `itemA` should come after `itemB`. If the `itemA` and `itemB` are equal this\n * function should return `0`.\n *\n * Therefore, if this function is comparing some numeric values, simple\n * `itemA - itemB` or `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used\n * instead of series of `if`.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sort } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   this.names = Ember.A([{name:'Link'},{name:'Zelda'},{name:'Ganon'},{name:'Navi'}]);\n *   @sort('names', function(a, b){\n *     if (a.name > b.name) {\n *       return 1;\n *     } else if (a.name < b.name) {\n *       return -1;\n *     }\n *\n *     return 0;\n *   }) sortedNames // [{name:'Ganon'},{name:'Link'},{name:'Navi'},{name:'Zelda'}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The key for the array that should be sorted\n * @param {Array<String>|Function(Any, Any): Number} sortDefinition - Sorting function or sort descriptor\n ",
            "start": 19224,
            "end": 20861,
            "loc": {
              "start": {
                "line": 591,
                "column": 0
              },
              "end": {
                "line": 636,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.sum](http://emberjs.com/api/classes/Ember.computed.html#method_sum)\n *\n * A computed property that returns the sum of the value in the dependent\n * array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sum } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 3]),\n *\n *   @sum('values') total // 6\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to sum up\n ",
            "start": 20981,
            "end": 21489,
            "loc": {
              "start": {
                "line": 639,
                "column": 0
              },
              "end": {
                "line": 658,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 21490,
        "end": 21604,
        "loc": {
          "start": {
            "line": 659,
            "column": 0
          },
          "end": {
            "line": 659,
            "column": 114
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 21497,
          "end": 21604,
          "loc": {
            "start": {
              "line": 659,
              "column": 7
            },
            "end": {
              "line": 659,
              "column": 114
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 21503,
              "end": 21603,
              "loc": {
                "start": {
                  "line": 659,
                  "column": 13
                },
                "end": {
                  "line": 659,
                  "column": 113
                }
              },
              "id": {
                "type": "Identifier",
                "start": 21503,
                "end": 21506,
                "loc": {
                  "start": {
                    "line": 659,
                    "column": 13
                  },
                  "end": {
                    "line": 659,
                    "column": 16
                  },
                  "identifierName": "sum"
                },
                "name": "sum",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 21509,
                "end": 21603,
                "loc": {
                  "start": {
                    "line": 659,
                    "column": 19
                  },
                  "end": {
                    "line": 659,
                    "column": 113
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 21509,
                  "end": 21544,
                  "loc": {
                    "start": {
                      "line": 659,
                      "column": 19
                    },
                    "end": {
                      "line": 659,
                      "column": 54
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 21545,
                    "end": 21563,
                    "loc": {
                      "start": {
                        "line": 659,
                        "column": 55
                      },
                      "end": {
                        "line": 659,
                        "column": 73
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 21545,
                      "end": 21559,
                      "loc": {
                        "start": {
                          "line": 659,
                          "column": 55
                        },
                        "end": {
                          "line": 659,
                          "column": 69
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 21545,
                        "end": 21550,
                        "loc": {
                          "start": {
                            "line": 659,
                            "column": 55
                          },
                          "end": {
                            "line": 659,
                            "column": 60
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 21551,
                        "end": 21559,
                        "loc": {
                          "start": {
                            "line": 659,
                            "column": 61
                          },
                          "end": {
                            "line": 659,
                            "column": 69
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 21560,
                      "end": 21563,
                      "loc": {
                        "start": {
                          "line": 659,
                          "column": 70
                        },
                        "end": {
                          "line": 659,
                          "column": 73
                        },
                        "identifierName": "sum"
                      },
                      "name": "sum"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 21565,
                    "end": 21602,
                    "loc": {
                      "start": {
                        "line": 659,
                        "column": 75
                      },
                      "end": {
                        "line": 659,
                        "column": 112
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `sum` without parameters",
                      "raw": "'Cannot use `sum` without parameters'"
                    },
                    "value": "Cannot use `sum` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.sum](http://emberjs.com/api/classes/Ember.computed.html#method_sum)\n *\n * A computed property that returns the sum of the value in the dependent\n * array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sum } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 3]),\n *\n *   @sum('values') total // 6\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to sum up\n ",
              "start": 20981,
              "end": 21489,
              "loc": {
                "start": {
                  "line": 639,
                  "column": 0
                },
                "end": {
                  "line": 658,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.union](http://emberjs.com/api/classes/Ember.computed.html#method_union)\n *\n * Alias for [union](http://emberjs.com/api/classes/Ember.computed.html#method_uniq).\n *\n * ```javascript\n * import Ember from 'ember';\n * import { union } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @union('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to union\n ",
              "start": 21606,
              "end": 22249,
              "loc": {
                "start": {
                  "line": 661,
                  "column": 0
                },
                "end": {
                  "line": 680,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.sum](http://emberjs.com/api/classes/Ember.computed.html#method_sum)\n *\n * A computed property that returns the sum of the value in the dependent\n * array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sum } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 3]),\n *\n *   @sum('values') total // 6\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to sum up\n ",
            "start": 20981,
            "end": 21489,
            "loc": {
              "start": {
                "line": 639,
                "column": 0
              },
              "end": {
                "line": 658,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.union](http://emberjs.com/api/classes/Ember.computed.html#method_union)\n *\n * Alias for [union](http://emberjs.com/api/classes/Ember.computed.html#method_uniq).\n *\n * ```javascript\n * import Ember from 'ember';\n * import { union } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @union('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to union\n ",
            "start": 21606,
            "end": 22249,
            "loc": {
              "start": {
                "line": 661,
                "column": 0
              },
              "end": {
                "line": 680,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 22250,
        "end": 22370,
        "loc": {
          "start": {
            "line": 681,
            "column": 0
          },
          "end": {
            "line": 681,
            "column": 120
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 22257,
          "end": 22370,
          "loc": {
            "start": {
              "line": 681,
              "column": 7
            },
            "end": {
              "line": 681,
              "column": 120
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 22263,
              "end": 22369,
              "loc": {
                "start": {
                  "line": 681,
                  "column": 13
                },
                "end": {
                  "line": 681,
                  "column": 119
                }
              },
              "id": {
                "type": "Identifier",
                "start": 22263,
                "end": 22268,
                "loc": {
                  "start": {
                    "line": 681,
                    "column": 13
                  },
                  "end": {
                    "line": 681,
                    "column": 18
                  },
                  "identifierName": "union"
                },
                "name": "union",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 22271,
                "end": 22369,
                "loc": {
                  "start": {
                    "line": 681,
                    "column": 21
                  },
                  "end": {
                    "line": 681,
                    "column": 119
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 22271,
                  "end": 22306,
                  "loc": {
                    "start": {
                      "line": 681,
                      "column": 21
                    },
                    "end": {
                      "line": 681,
                      "column": 56
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 22307,
                    "end": 22327,
                    "loc": {
                      "start": {
                        "line": 681,
                        "column": 57
                      },
                      "end": {
                        "line": 681,
                        "column": 77
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 22307,
                      "end": 22321,
                      "loc": {
                        "start": {
                          "line": 681,
                          "column": 57
                        },
                        "end": {
                          "line": 681,
                          "column": 71
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 22307,
                        "end": 22312,
                        "loc": {
                          "start": {
                            "line": 681,
                            "column": 57
                          },
                          "end": {
                            "line": 681,
                            "column": 62
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 22313,
                        "end": 22321,
                        "loc": {
                          "start": {
                            "line": 681,
                            "column": 63
                          },
                          "end": {
                            "line": 681,
                            "column": 71
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 22322,
                      "end": 22327,
                      "loc": {
                        "start": {
                          "line": 681,
                          "column": 72
                        },
                        "end": {
                          "line": 681,
                          "column": 77
                        },
                        "identifierName": "union"
                      },
                      "name": "union"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 22329,
                    "end": 22368,
                    "loc": {
                      "start": {
                        "line": 681,
                        "column": 79
                      },
                      "end": {
                        "line": 681,
                        "column": 118
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `union` without parameters",
                      "raw": "'Cannot use `union` without parameters'"
                    },
                    "value": "Cannot use `union` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.union](http://emberjs.com/api/classes/Ember.computed.html#method_union)\n *\n * Alias for [union](http://emberjs.com/api/classes/Ember.computed.html#method_uniq).\n *\n * ```javascript\n * import Ember from 'ember';\n * import { union } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @union('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to union\n ",
              "start": 21606,
              "end": 22249,
              "loc": {
                "start": {
                  "line": 661,
                  "column": 0
                },
                "end": {
                  "line": 680,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.uniq](http://emberjs.com/api/classes/Ember.computed.html#method_uniq)\n *\n * A computed property which returns a new array with all the unique elements from one or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { uniq } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @uniq('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to uniq\n ",
              "start": 22372,
              "end": 23031,
              "loc": {
                "start": {
                  "line": 683,
                  "column": 0
                },
                "end": {
                  "line": 702,
                  "column": 3
                }
              }
            }
          ]
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.union](http://emberjs.com/api/classes/Ember.computed.html#method_union)\n *\n * Alias for [union](http://emberjs.com/api/classes/Ember.computed.html#method_uniq).\n *\n * ```javascript\n * import Ember from 'ember';\n * import { union } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @union('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to union\n ",
            "start": 21606,
            "end": 22249,
            "loc": {
              "start": {
                "line": 661,
                "column": 0
              },
              "end": {
                "line": 680,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.uniq](http://emberjs.com/api/classes/Ember.computed.html#method_uniq)\n *\n * A computed property which returns a new array with all the unique elements from one or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { uniq } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @uniq('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to uniq\n ",
            "start": 22372,
            "end": 23031,
            "loc": {
              "start": {
                "line": 683,
                "column": 0
              },
              "end": {
                "line": 702,
                "column": 3
              }
            }
          }
        ]
      },
      {
        "type": "ExportNamedDeclaration",
        "start": 23032,
        "end": 23149,
        "loc": {
          "start": {
            "line": 703,
            "column": 0
          },
          "end": {
            "line": 703,
            "column": 117
          }
        },
        "specifiers": [],
        "source": null,
        "declaration": {
          "type": "VariableDeclaration",
          "start": 23039,
          "end": 23149,
          "loc": {
            "start": {
              "line": 703,
              "column": 7
            },
            "end": {
              "line": 703,
              "column": 117
            }
          },
          "declarations": [
            {
              "type": "VariableDeclarator",
              "start": 23045,
              "end": 23148,
              "loc": {
                "start": {
                  "line": 703,
                  "column": 13
                },
                "end": {
                  "line": 703,
                  "column": 116
                }
              },
              "id": {
                "type": "Identifier",
                "start": 23045,
                "end": 23049,
                "loc": {
                  "start": {
                    "line": 703,
                    "column": 13
                  },
                  "end": {
                    "line": 703,
                    "column": 17
                  },
                  "identifierName": "uniq"
                },
                "name": "uniq",
                "leadingComments": null
              },
              "init": {
                "type": "CallExpression",
                "start": 23052,
                "end": 23148,
                "loc": {
                  "start": {
                    "line": 703,
                    "column": 20
                  },
                  "end": {
                    "line": 703,
                    "column": 116
                  }
                },
                "callee": {
                  "type": "Identifier",
                  "start": 23052,
                  "end": 23087,
                  "loc": {
                    "start": {
                      "line": 703,
                      "column": 20
                    },
                    "end": {
                      "line": 703,
                      "column": 55
                    },
                    "identifierName": "decoratedPropertyWithRequiredParams"
                  },
                  "name": "decoratedPropertyWithRequiredParams"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "start": 23088,
                    "end": 23107,
                    "loc": {
                      "start": {
                        "line": 703,
                        "column": 56
                      },
                      "end": {
                        "line": 703,
                        "column": 75
                      }
                    },
                    "object": {
                      "type": "MemberExpression",
                      "start": 23088,
                      "end": 23102,
                      "loc": {
                        "start": {
                          "line": 703,
                          "column": 56
                        },
                        "end": {
                          "line": 703,
                          "column": 70
                        }
                      },
                      "object": {
                        "type": "Identifier",
                        "start": 23088,
                        "end": 23093,
                        "loc": {
                          "start": {
                            "line": 703,
                            "column": 56
                          },
                          "end": {
                            "line": 703,
                            "column": 61
                          },
                          "identifierName": "Ember"
                        },
                        "name": "Ember"
                      },
                      "property": {
                        "type": "Identifier",
                        "start": 23094,
                        "end": 23102,
                        "loc": {
                          "start": {
                            "line": 703,
                            "column": 62
                          },
                          "end": {
                            "line": 703,
                            "column": 70
                          },
                          "identifierName": "computed"
                        },
                        "name": "computed"
                      },
                      "computed": false
                    },
                    "property": {
                      "type": "Identifier",
                      "start": 23103,
                      "end": 23107,
                      "loc": {
                        "start": {
                          "line": 703,
                          "column": 71
                        },
                        "end": {
                          "line": 703,
                          "column": 75
                        },
                        "identifierName": "uniq"
                      },
                      "name": "uniq"
                    },
                    "computed": false
                  },
                  {
                    "type": "StringLiteral",
                    "start": 23109,
                    "end": 23147,
                    "loc": {
                      "start": {
                        "line": 703,
                        "column": 77
                      },
                      "end": {
                        "line": 703,
                        "column": 115
                      }
                    },
                    "extra": {
                      "rawValue": "Cannot use `uniq` without parameters",
                      "raw": "'Cannot use `uniq` without parameters'"
                    },
                    "value": "Cannot use `uniq` without parameters"
                  }
                ]
              },
              "leadingComments": null
            }
          ],
          "kind": "const",
          "leadingComments": [
            {
              "type": "CommentBlock",
              "value": "*\n * Decorator that wraps [Ember.computed.uniq](http://emberjs.com/api/classes/Ember.computed.html#method_uniq)\n *\n * A computed property which returns a new array with all the unique elements from one or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { uniq } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @uniq('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to uniq\n ",
              "start": 22372,
              "end": 23031,
              "loc": {
                "start": {
                  "line": 683,
                  "column": 0
                },
                "end": {
                  "line": 702,
                  "column": 3
                }
              }
            }
          ],
          "trailingComments": []
        },
        "leadingComments": [
          {
            "type": "CommentBlock",
            "value": "*\n * Decorator that wraps [Ember.computed.uniq](http://emberjs.com/api/classes/Ember.computed.html#method_uniq)\n *\n * A computed property which returns a new array with all the unique elements from one or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { uniq } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @uniq('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to uniq\n ",
            "start": 22372,
            "end": 23031,
            "loc": {
              "start": {
                "line": 683,
                "column": 0
              },
              "end": {
                "line": 702,
                "column": 3
              }
            }
          }
        ]
      }
    ],
    "directives": []
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.alias](http://emberjs.com/api/classes/Ember.computed.html#method_alias)\n *\n * Creates a new property that is an alias for another property on an object.\n * Calls to get or set this property behave as though they were called on\n * the original property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { alias } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @alias('person.first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the aliased property\n ",
      "start": 112,
      "end": 739,
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 29,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.and](http://emberjs.com/api/classes/Ember.computed.html#method_and)\n *\n * A computed property that performs a logical and on the original values\n * for the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { and } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @and('first', 'last') hasFullName // false\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for properties to `and`\n ",
      "start": 862,
      "end": 1435,
      "loc": {
        "start": {
          "line": 32,
          "column": 0
        },
        "end": {
          "line": 53,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.bool](http://emberjs.com/api/classes/Ember.computed.html#method_bool)\n *\n * A computed property that converts the provided dependent property into a\n * boolean value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { bool } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   messageCount: 1,\n *\n *   @bool('messageCount') hasMessages // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to convert\n ",
      "start": 1552,
      "end": 2083,
      "loc": {
        "start": {
          "line": 56,
          "column": 0
        },
        "end": {
          "line": 75,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.collect](http://emberjs.com/api/classes/Ember.computed.html#method_collect)\n *\n * A computed property that returns the array of values for the provided\n * dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { collect } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   light: 'strobe',\n *   lens: '35mm prime',\n *\n *   @collect('light', 'lens') equipment // ['strobe', '35mm prime']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for the properties to collect\n ",
      "start": 2203,
      "end": 2801,
      "loc": {
        "start": {
          "line": 78,
          "column": 0
        },
        "end": {
          "line": 98,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.empty](http://emberjs.com/api/classes/Ember.computed.html#method_empty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { empty } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   items: Ember.A(['taco', 'burrito']),\n *\n *   @empty('items') isEmpty // false\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the property to check emptiness of\n ",
      "start": 2930,
      "end": 3534,
      "loc": {
        "start": {
          "line": 101,
          "column": 0
        },
        "end": {
          "line": 120,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.equal](http://emberjs.com/api/classes/Ember.computed.html#method_equal)\n *\n * A computed property that returns true if the dependent properties are equal.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { equal } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   state: 'sleepy',\n *\n *   @equal('state', 'sleepy') napTime // true\n * });\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n * @param {Any} value - Value to compare the dependent property to\n ",
      "start": 3657,
      "end": 4235,
      "loc": {
        "start": {
          "line": 123,
          "column": 0
        },
        "end": {
          "line": 141,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.filter](http://emberjs.com/api/classes/Ember.computed.html#method_filter)\n *\n * Filters the items in the array by the provided callback.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filter } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filter('chores', function(chore, index, array) {\n *     return !chore.done;\n *   }) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {Function(item: Any, index: Number, array: Array<Any>): Boolean} callback - The function to filter with\n ",
      "start": 4358,
      "end": 5219,
      "loc": {
        "start": {
          "line": 144,
          "column": 0
        },
        "end": {
          "line": 169,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.filterBy](http://emberjs.com/api/classes/Ember.computed.html#method_filterBy)\n *\n * Filters the array by the property and value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filterBy } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filterBy('chores', 'done', false) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {String} propertyKey - Property of the array items to filter by\n * @param {Any} value - Value to filter by\n ",
      "start": 5345,
      "end": 6153,
      "loc": {
        "start": {
          "line": 172,
          "column": 0
        },
        "end": {
          "line": 196,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.gt](http://emberjs.com/api/classes/Ember.computed.html#method_gt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gt } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalCats: 11,\n *\n *   @gt('totalCats', 10) isCatParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
      "start": 6285,
      "end": 6881,
      "loc": {
        "start": {
          "line": 199,
          "column": 0
        },
        "end": {
          "line": 219,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.gte](http://emberjs.com/api/classes/Ember.computed.html#method_gte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gte } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @gte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
      "start": 6995,
      "end": 7619,
      "loc": {
        "start": {
          "line": 222,
          "column": 0
        },
        "end": {
          "line": 242,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.intersect](http://emberjs.com/api/classes/Ember.computed.html#method_intersect)\n *\n * A computed property which returns a new array with all the duplicated\n * elements from two or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { intersect } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @intersect('likes', 'foods') favoriteFoods // ['tacos', 'pizza']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to intersect\n ",
      "start": 7736,
      "end": 8408,
      "loc": {
        "start": {
          "line": 245,
          "column": 0
        },
        "end": {
          "line": 265,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.lt](http://emberjs.com/api/classes/Ember.computed.html#method_lt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lt } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalDogs: 3,\n *\n *   @lt('totalDogs', 10) isDogParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
      "start": 8543,
      "end": 9135,
      "loc": {
        "start": {
          "line": 268,
          "column": 0
        },
        "end": {
          "line": 288,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.lte](http://emberjs.com/api/classes/Ember.computed.html#method_lte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lte } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @lte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
      "start": 9249,
      "end": 9870,
      "loc": {
        "start": {
          "line": 291,
          "column": 0
        },
        "end": {
          "line": 311,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.map](http://emberjs.com/api/classes/Ember.computed.html#method_map)\n *\n * Returns an array mapped via the callback\n *\n * ```javascript\n * import Ember from 'ember';\n * import { map } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A(['clean', 'write more unit tests']),\n *\n *   @map('chores', function(chore, index) {\n *     return chore.toUpperCase() + '!';\n *   }) loudChores // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {Function(item: Any, index: Number): Any} callback - Function to map over the array\n ",
      "start": 9987,
      "end": 10691,
      "loc": {
        "start": {
          "line": 314,
          "column": 0
        },
        "end": {
          "line": 335,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.mapBy](http://emberjs.com/api/classes/Ember.computed.html#method_mapBy)\n *\n * Returns an array mapped to the specified key.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { mapBy } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   people: Ember.A([\n *     {name: \"George\", age: 5},\n *     {name: \"Stella\", age: 10},\n *     {name: \"Violet\", age: 7}\n *   ]),\n *\n *   @mapBy('people', 'age') ages // [5, 10, 7]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {String} propertyKey - Property of the array items to map by\n ",
      "start": 10808,
      "end": 11476,
      "loc": {
        "start": {
          "line": 338,
          "column": 0
        },
        "end": {
          "line": 361,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.match](http://emberjs.com/api/classes/Ember.computed.html#method_match)\n *\n * A computed property which matches the original value for the dependent\n * property against a given RegExp, returning `true` if they values matches\n * the RegExp and `false` if it does not.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { match } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   email: 'tomster@emberjs.com',\n *\n *   @match('email', /^.+@.+\\..+$/) validEmail\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The property to match\n * @param {RegExp} pattern - The pattern to match against\n ",
      "start": 11599,
      "end": 12292,
      "loc": {
        "start": {
          "line": 364,
          "column": 0
        },
        "end": {
          "line": 385,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.max](http://emberjs.com/api/classes/Ember.computed.html#method_max)\n *\n * A computed property that calculates the maximum value in the dependent\n * array. This will return `-Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { max } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @max('values') maxValue // 10\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
      "start": 12415,
      "end": 13011,
      "loc": {
        "start": {
          "line": 388,
          "column": 0
        },
        "end": {
          "line": 407,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.min](http://emberjs.com/api/classes/Ember.computed.html#method_min)\n *\n * A computed property that calculates the minimum value in the dependent\n * array. This will return `Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { min } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @min('values') minValue // 1\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
      "start": 13128,
      "end": 13722,
      "loc": {
        "start": {
          "line": 410,
          "column": 0
        },
        "end": {
          "line": 429,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.none](http://emberjs.com/api/classes/Ember.computed.html#method_none)\n *\n * A computed property that returns true if the value of the dependent property\n * is null or undefined. This avoids errors from JSLint complaining about use\n * of `==`, which can be technically confusing.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { none } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   firstName: null,\n *\n *   @none('firstName') isNameless // true until firstName is defined\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
      "start": 13839,
      "end": 14503,
      "loc": {
        "start": {
          "line": 432,
          "column": 0
        },
        "end": {
          "line": 452,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.not](http://emberjs.com/api/classes/Ember.computed.html#method_not)\n *\n * A computed property that returns the inverse boolean value of the original\n * value for the dependent property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { not } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   loggedIn: false,\n *\n *   @not('loggedIn') isAnonymous // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to `not`\n ",
      "start": 14623,
      "end": 15165,
      "loc": {
        "start": {
          "line": 455,
          "column": 0
        },
        "end": {
          "line": 474,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.notEmpty](http://emberjs.com/api/classes/Ember.computed.html#method_notEmpty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is NOT null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { notEmpty } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   groceryBag: Ember.A(['milk', 'eggs', 'apples']),\n *\n *   @notEmpty('groceryBag') hasGroceriesToPutAway // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
      "start": 15282,
      "end": 15920,
      "loc": {
        "start": {
          "line": 477,
          "column": 0
        },
        "end": {
          "line": 496,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.oneWay](http://emberjs.com/api/classes/Ember.computed.html#method_oneWay)\n *\n * Where `computed.alias` aliases `get` and `set`, and allows for bidirectional\n * data flow, `computed.oneWay` only provides an aliased `get`. The `set` will\n * not mutate the upstream property, rather causes the current property to\n * become the value set. This causes the downstream property to permanently\n * diverge from the upstream property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { oneWay } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   firstName: 'Joe',\n *\n *   @oneWay('firstName') originalName // will always be 'Joe'\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to alias\n ",
      "start": 16052,
      "end": 16859,
      "loc": {
        "start": {
          "line": 499,
          "column": 0
        },
        "end": {
          "line": 521,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.or](http://emberjs.com/api/classes/Ember.computed.html#method_or)\n *\n * A computed property which performs a logical or on the original values for\n * the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { or } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   hasJacket: true,\n *   hasUmbrella: false,\n *\n *   @or('hasJacket', 'hasUmbrella') isReadyForRain // true\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKey - Key for the properties to `or`\n ",
      "start": 16985,
      "end": 17572,
      "loc": {
        "start": {
          "line": 524,
          "column": 0
        },
        "end": {
          "line": 544,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.reads](http://emberjs.com/api/classes/Ember.computed.html#method_reads)\n *\n * This is a more semantically meaningful alias of `computed.oneWay`, whose\n * name is somewhat ambiguous as to which direction the data flows.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { reads } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   @reads('first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to read\n ",
      "start": 17686,
      "end": 18226,
      "loc": {
        "start": {
          "line": 547,
          "column": 0
        },
        "end": {
          "line": 564,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.setDiff](http://emberjs.com/api/classes/Ember.computed.html#method_setDiff)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array that are not in the second dependent array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { setDiff } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @setDiff('likes', 'foods') favoriteThingsThatArentFood // ['puppies']\n * });\n * ```\n *\n * @function\n * @param {String} setAProperty - Keys for the first set\n * @param {String} setBProperty - Keys for the first set\n ",
      "start": 18349,
      "end": 19095,
      "loc": {
        "start": {
          "line": 567,
          "column": 0
        },
        "end": {
          "line": 588,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.sort](http://emberjs.com/api/classes/Ember.computed.html#method_sort)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array sorted based on a property or sort function.\n *\n *\n * The callback method you provide should have the following signature:\n *\n * ```javascript\n * function(itemA, itemB);\n * ```\n * - `itemA` the first item to compare.\n * - `itemB` the second item to compare.\n *\n * This function should return negative number (e.g. `-1`) when `itemA` should\n * come before `itemB`. It should return positive number (e.g. `1`) when\n * `itemA` should come after `itemB`. If the `itemA` and `itemB` are equal this\n * function should return `0`.\n *\n * Therefore, if this function is comparing some numeric values, simple\n * `itemA - itemB` or `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used\n * instead of series of `if`.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sort } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   this.names = Ember.A([{name:'Link'},{name:'Zelda'},{name:'Ganon'},{name:'Navi'}]);\n *   @sort('names', function(a, b){\n *     if (a.name > b.name) {\n *       return 1;\n *     } else if (a.name < b.name) {\n *       return -1;\n *     }\n *\n *     return 0;\n *   }) sortedNames // [{name:'Ganon'},{name:'Link'},{name:'Navi'},{name:'Zelda'}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The key for the array that should be sorted\n * @param {Array<String>|Function(Any, Any): Number} sortDefinition - Sorting function or sort descriptor\n ",
      "start": 19224,
      "end": 20861,
      "loc": {
        "start": {
          "line": 591,
          "column": 0
        },
        "end": {
          "line": 636,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.sum](http://emberjs.com/api/classes/Ember.computed.html#method_sum)\n *\n * A computed property that returns the sum of the value in the dependent\n * array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sum } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 3]),\n *\n *   @sum('values') total // 6\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to sum up\n ",
      "start": 20981,
      "end": 21489,
      "loc": {
        "start": {
          "line": 639,
          "column": 0
        },
        "end": {
          "line": 658,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.union](http://emberjs.com/api/classes/Ember.computed.html#method_union)\n *\n * Alias for [union](http://emberjs.com/api/classes/Ember.computed.html#method_uniq).\n *\n * ```javascript\n * import Ember from 'ember';\n * import { union } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @union('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to union\n ",
      "start": 21606,
      "end": 22249,
      "loc": {
        "start": {
          "line": 661,
          "column": 0
        },
        "end": {
          "line": 680,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.uniq](http://emberjs.com/api/classes/Ember.computed.html#method_uniq)\n *\n * A computed property which returns a new array with all the unique elements from one or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { uniq } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @uniq('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to uniq\n ",
      "start": 22372,
      "end": 23031,
      "loc": {
        "start": {
          "line": 683,
          "column": 0
        },
        "end": {
          "line": 702,
          "column": 3
        }
      }
    }
  ],
  "tokens": [
    {
      "type": {
        "label": "import",
        "keyword": "import",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "import",
      "start": 0,
      "end": 6,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 7,
      "end": 12,
      "loc": {
        "start": {
          "line": 1,
          "column": 7
        },
        "end": {
          "line": 1,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "from",
      "start": 13,
      "end": 17,
      "loc": {
        "start": {
          "line": 1,
          "column": 13
        },
        "end": {
          "line": 1,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "ember",
      "start": 18,
      "end": 25,
      "loc": {
        "start": {
          "line": 1,
          "column": 18
        },
        "end": {
          "line": 1,
          "column": 25
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 25,
      "end": 26,
      "loc": {
        "start": {
          "line": 1,
          "column": 25
        },
        "end": {
          "line": 1,
          "column": 26
        }
      }
    },
    {
      "type": {
        "label": "import",
        "keyword": "import",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "import",
      "start": 28,
      "end": 34,
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "{",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 35,
      "end": 36,
      "loc": {
        "start": {
          "line": 3,
          "column": 7
        },
        "end": {
          "line": 3,
          "column": 8
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 39,
      "end": 74,
      "loc": {
        "start": {
          "line": 4,
          "column": 2
        },
        "end": {
          "line": 4,
          "column": 37
        }
      }
    },
    {
      "type": {
        "label": "}",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 75,
      "end": 76,
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 1
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "from",
      "start": 77,
      "end": 81,
      "loc": {
        "start": {
          "line": 5,
          "column": 2
        },
        "end": {
          "line": 5,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "../utils/decorator-macros",
      "start": 82,
      "end": 109,
      "loc": {
        "start": {
          "line": 5,
          "column": 7
        },
        "end": {
          "line": 5,
          "column": 34
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 109,
      "end": 110,
      "loc": {
        "start": {
          "line": 5,
          "column": 34
        },
        "end": {
          "line": 5,
          "column": 35
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.alias](http://emberjs.com/api/classes/Ember.computed.html#method_alias)\n *\n * Creates a new property that is an alias for another property on an object.\n * Calls to get or set this property behave as though they were called on\n * the original property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { alias } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @alias('person.first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the aliased property\n ",
      "start": 112,
      "end": 739,
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 29,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 740,
      "end": 746,
      "loc": {
        "start": {
          "line": 30,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 747,
      "end": 752,
      "loc": {
        "start": {
          "line": 30,
          "column": 7
        },
        "end": {
          "line": 30,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "alias",
      "start": 753,
      "end": 758,
      "loc": {
        "start": {
          "line": 30,
          "column": 13
        },
        "end": {
          "line": 30,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 759,
      "end": 760,
      "loc": {
        "start": {
          "line": 30,
          "column": 19
        },
        "end": {
          "line": 30,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 761,
      "end": 796,
      "loc": {
        "start": {
          "line": 30,
          "column": 21
        },
        "end": {
          "line": 30,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 796,
      "end": 797,
      "loc": {
        "start": {
          "line": 30,
          "column": 56
        },
        "end": {
          "line": 30,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 797,
      "end": 802,
      "loc": {
        "start": {
          "line": 30,
          "column": 57
        },
        "end": {
          "line": 30,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 802,
      "end": 803,
      "loc": {
        "start": {
          "line": 30,
          "column": 62
        },
        "end": {
          "line": 30,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 803,
      "end": 811,
      "loc": {
        "start": {
          "line": 30,
          "column": 63
        },
        "end": {
          "line": 30,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 811,
      "end": 812,
      "loc": {
        "start": {
          "line": 30,
          "column": 71
        },
        "end": {
          "line": 30,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "alias",
      "start": 812,
      "end": 817,
      "loc": {
        "start": {
          "line": 30,
          "column": 72
        },
        "end": {
          "line": 30,
          "column": 77
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 817,
      "end": 818,
      "loc": {
        "start": {
          "line": 30,
          "column": 77
        },
        "end": {
          "line": 30,
          "column": 78
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `alias` without parameters",
      "start": 819,
      "end": 858,
      "loc": {
        "start": {
          "line": 30,
          "column": 79
        },
        "end": {
          "line": 30,
          "column": 118
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 858,
      "end": 859,
      "loc": {
        "start": {
          "line": 30,
          "column": 118
        },
        "end": {
          "line": 30,
          "column": 119
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 859,
      "end": 860,
      "loc": {
        "start": {
          "line": 30,
          "column": 119
        },
        "end": {
          "line": 30,
          "column": 120
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.and](http://emberjs.com/api/classes/Ember.computed.html#method_and)\n *\n * A computed property that performs a logical and on the original values\n * for the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { and } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   person: {\n *     first: 'Joe'\n *   },\n *\n *   @and('first', 'last') hasFullName // false\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for properties to `and`\n ",
      "start": 862,
      "end": 1435,
      "loc": {
        "start": {
          "line": 32,
          "column": 0
        },
        "end": {
          "line": 53,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 1436,
      "end": 1442,
      "loc": {
        "start": {
          "line": 54,
          "column": 0
        },
        "end": {
          "line": 54,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 1443,
      "end": 1448,
      "loc": {
        "start": {
          "line": 54,
          "column": 7
        },
        "end": {
          "line": 54,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "and",
      "start": 1449,
      "end": 1452,
      "loc": {
        "start": {
          "line": 54,
          "column": 13
        },
        "end": {
          "line": 54,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 1453,
      "end": 1454,
      "loc": {
        "start": {
          "line": 54,
          "column": 17
        },
        "end": {
          "line": 54,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 1455,
      "end": 1490,
      "loc": {
        "start": {
          "line": 54,
          "column": 19
        },
        "end": {
          "line": 54,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1490,
      "end": 1491,
      "loc": {
        "start": {
          "line": 54,
          "column": 54
        },
        "end": {
          "line": 54,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 1491,
      "end": 1496,
      "loc": {
        "start": {
          "line": 54,
          "column": 55
        },
        "end": {
          "line": 54,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 1496,
      "end": 1497,
      "loc": {
        "start": {
          "line": 54,
          "column": 60
        },
        "end": {
          "line": 54,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 1497,
      "end": 1505,
      "loc": {
        "start": {
          "line": 54,
          "column": 61
        },
        "end": {
          "line": 54,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 1505,
      "end": 1506,
      "loc": {
        "start": {
          "line": 54,
          "column": 69
        },
        "end": {
          "line": 54,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "and",
      "start": 1506,
      "end": 1509,
      "loc": {
        "start": {
          "line": 54,
          "column": 70
        },
        "end": {
          "line": 54,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 1509,
      "end": 1510,
      "loc": {
        "start": {
          "line": 54,
          "column": 73
        },
        "end": {
          "line": 54,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `and` without parameters",
      "start": 1511,
      "end": 1548,
      "loc": {
        "start": {
          "line": 54,
          "column": 75
        },
        "end": {
          "line": 54,
          "column": 112
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 1548,
      "end": 1549,
      "loc": {
        "start": {
          "line": 54,
          "column": 112
        },
        "end": {
          "line": 54,
          "column": 113
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 1549,
      "end": 1550,
      "loc": {
        "start": {
          "line": 54,
          "column": 113
        },
        "end": {
          "line": 54,
          "column": 114
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.bool](http://emberjs.com/api/classes/Ember.computed.html#method_bool)\n *\n * A computed property that converts the provided dependent property into a\n * boolean value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { bool } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   messageCount: 1,\n *\n *   @bool('messageCount') hasMessages // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to convert\n ",
      "start": 1552,
      "end": 2083,
      "loc": {
        "start": {
          "line": 56,
          "column": 0
        },
        "end": {
          "line": 75,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 2084,
      "end": 2090,
      "loc": {
        "start": {
          "line": 76,
          "column": 0
        },
        "end": {
          "line": 76,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 2091,
      "end": 2096,
      "loc": {
        "start": {
          "line": 76,
          "column": 7
        },
        "end": {
          "line": 76,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "bool",
      "start": 2097,
      "end": 2101,
      "loc": {
        "start": {
          "line": 76,
          "column": 13
        },
        "end": {
          "line": 76,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 2102,
      "end": 2103,
      "loc": {
        "start": {
          "line": 76,
          "column": 18
        },
        "end": {
          "line": 76,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 2104,
      "end": 2139,
      "loc": {
        "start": {
          "line": 76,
          "column": 20
        },
        "end": {
          "line": 76,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2139,
      "end": 2140,
      "loc": {
        "start": {
          "line": 76,
          "column": 55
        },
        "end": {
          "line": 76,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 2140,
      "end": 2145,
      "loc": {
        "start": {
          "line": 76,
          "column": 56
        },
        "end": {
          "line": 76,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2145,
      "end": 2146,
      "loc": {
        "start": {
          "line": 76,
          "column": 61
        },
        "end": {
          "line": 76,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 2146,
      "end": 2154,
      "loc": {
        "start": {
          "line": 76,
          "column": 62
        },
        "end": {
          "line": 76,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2154,
      "end": 2155,
      "loc": {
        "start": {
          "line": 76,
          "column": 70
        },
        "end": {
          "line": 76,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "bool",
      "start": 2155,
      "end": 2159,
      "loc": {
        "start": {
          "line": 76,
          "column": 71
        },
        "end": {
          "line": 76,
          "column": 75
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2159,
      "end": 2160,
      "loc": {
        "start": {
          "line": 76,
          "column": 75
        },
        "end": {
          "line": 76,
          "column": 76
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `bool` without parameters",
      "start": 2161,
      "end": 2199,
      "loc": {
        "start": {
          "line": 76,
          "column": 77
        },
        "end": {
          "line": 76,
          "column": 115
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2199,
      "end": 2200,
      "loc": {
        "start": {
          "line": 76,
          "column": 115
        },
        "end": {
          "line": 76,
          "column": 116
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2200,
      "end": 2201,
      "loc": {
        "start": {
          "line": 76,
          "column": 116
        },
        "end": {
          "line": 76,
          "column": 117
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.collect](http://emberjs.com/api/classes/Ember.computed.html#method_collect)\n *\n * A computed property that returns the array of values for the provided\n * dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { collect } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   light: 'strobe',\n *   lens: '35mm prime',\n *\n *   @collect('light', 'lens') equipment // ['strobe', '35mm prime']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys for the properties to collect\n ",
      "start": 2203,
      "end": 2801,
      "loc": {
        "start": {
          "line": 78,
          "column": 0
        },
        "end": {
          "line": 98,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 2802,
      "end": 2808,
      "loc": {
        "start": {
          "line": 99,
          "column": 0
        },
        "end": {
          "line": 99,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 2809,
      "end": 2814,
      "loc": {
        "start": {
          "line": 99,
          "column": 7
        },
        "end": {
          "line": 99,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "collect",
      "start": 2815,
      "end": 2822,
      "loc": {
        "start": {
          "line": 99,
          "column": 13
        },
        "end": {
          "line": 99,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 2823,
      "end": 2824,
      "loc": {
        "start": {
          "line": 99,
          "column": 21
        },
        "end": {
          "line": 99,
          "column": 22
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 2825,
      "end": 2860,
      "loc": {
        "start": {
          "line": 99,
          "column": 23
        },
        "end": {
          "line": 99,
          "column": 58
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2860,
      "end": 2861,
      "loc": {
        "start": {
          "line": 99,
          "column": 58
        },
        "end": {
          "line": 99,
          "column": 59
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 2861,
      "end": 2866,
      "loc": {
        "start": {
          "line": 99,
          "column": 59
        },
        "end": {
          "line": 99,
          "column": 64
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2866,
      "end": 2867,
      "loc": {
        "start": {
          "line": 99,
          "column": 64
        },
        "end": {
          "line": 99,
          "column": 65
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 2867,
      "end": 2875,
      "loc": {
        "start": {
          "line": 99,
          "column": 65
        },
        "end": {
          "line": 99,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2875,
      "end": 2876,
      "loc": {
        "start": {
          "line": 99,
          "column": 73
        },
        "end": {
          "line": 99,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "collect",
      "start": 2876,
      "end": 2883,
      "loc": {
        "start": {
          "line": 99,
          "column": 74
        },
        "end": {
          "line": 99,
          "column": 81
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2883,
      "end": 2884,
      "loc": {
        "start": {
          "line": 99,
          "column": 81
        },
        "end": {
          "line": 99,
          "column": 82
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `collect` without parameters",
      "start": 2885,
      "end": 2926,
      "loc": {
        "start": {
          "line": 99,
          "column": 83
        },
        "end": {
          "line": 99,
          "column": 124
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 2926,
      "end": 2927,
      "loc": {
        "start": {
          "line": 99,
          "column": 124
        },
        "end": {
          "line": 99,
          "column": 125
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 2927,
      "end": 2928,
      "loc": {
        "start": {
          "line": 99,
          "column": 125
        },
        "end": {
          "line": 99,
          "column": 126
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.empty](http://emberjs.com/api/classes/Ember.computed.html#method_empty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { empty } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   items: Ember.A(['taco', 'burrito']),\n *\n *   @empty('items') isEmpty // false\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the property to check emptiness of\n ",
      "start": 2930,
      "end": 3534,
      "loc": {
        "start": {
          "line": 101,
          "column": 0
        },
        "end": {
          "line": 120,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 3535,
      "end": 3541,
      "loc": {
        "start": {
          "line": 121,
          "column": 0
        },
        "end": {
          "line": 121,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 3542,
      "end": 3547,
      "loc": {
        "start": {
          "line": 121,
          "column": 7
        },
        "end": {
          "line": 121,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "empty",
      "start": 3548,
      "end": 3553,
      "loc": {
        "start": {
          "line": 121,
          "column": 13
        },
        "end": {
          "line": 121,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 3554,
      "end": 3555,
      "loc": {
        "start": {
          "line": 121,
          "column": 19
        },
        "end": {
          "line": 121,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 3556,
      "end": 3591,
      "loc": {
        "start": {
          "line": 121,
          "column": 21
        },
        "end": {
          "line": 121,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3591,
      "end": 3592,
      "loc": {
        "start": {
          "line": 121,
          "column": 56
        },
        "end": {
          "line": 121,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 3592,
      "end": 3597,
      "loc": {
        "start": {
          "line": 121,
          "column": 57
        },
        "end": {
          "line": 121,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3597,
      "end": 3598,
      "loc": {
        "start": {
          "line": 121,
          "column": 62
        },
        "end": {
          "line": 121,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 3598,
      "end": 3606,
      "loc": {
        "start": {
          "line": 121,
          "column": 63
        },
        "end": {
          "line": 121,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3606,
      "end": 3607,
      "loc": {
        "start": {
          "line": 121,
          "column": 71
        },
        "end": {
          "line": 121,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "empty",
      "start": 3607,
      "end": 3612,
      "loc": {
        "start": {
          "line": 121,
          "column": 72
        },
        "end": {
          "line": 121,
          "column": 77
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3612,
      "end": 3613,
      "loc": {
        "start": {
          "line": 121,
          "column": 77
        },
        "end": {
          "line": 121,
          "column": 78
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `empty` without parameters",
      "start": 3614,
      "end": 3653,
      "loc": {
        "start": {
          "line": 121,
          "column": 79
        },
        "end": {
          "line": 121,
          "column": 118
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 3653,
      "end": 3654,
      "loc": {
        "start": {
          "line": 121,
          "column": 118
        },
        "end": {
          "line": 121,
          "column": 119
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 3654,
      "end": 3655,
      "loc": {
        "start": {
          "line": 121,
          "column": 119
        },
        "end": {
          "line": 121,
          "column": 120
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.equal](http://emberjs.com/api/classes/Ember.computed.html#method_equal)\n *\n * A computed property that returns true if the dependent properties are equal.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { equal } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   state: 'sleepy',\n *\n *   @equal('state', 'sleepy') napTime // true\n * });\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n * @param {Any} value - Value to compare the dependent property to\n ",
      "start": 3657,
      "end": 4235,
      "loc": {
        "start": {
          "line": 123,
          "column": 0
        },
        "end": {
          "line": 141,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 4236,
      "end": 4242,
      "loc": {
        "start": {
          "line": 142,
          "column": 0
        },
        "end": {
          "line": 142,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 4243,
      "end": 4248,
      "loc": {
        "start": {
          "line": 142,
          "column": 7
        },
        "end": {
          "line": 142,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "equal",
      "start": 4249,
      "end": 4254,
      "loc": {
        "start": {
          "line": 142,
          "column": 13
        },
        "end": {
          "line": 142,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 4255,
      "end": 4256,
      "loc": {
        "start": {
          "line": 142,
          "column": 19
        },
        "end": {
          "line": 142,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 4257,
      "end": 4292,
      "loc": {
        "start": {
          "line": 142,
          "column": 21
        },
        "end": {
          "line": 142,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4292,
      "end": 4293,
      "loc": {
        "start": {
          "line": 142,
          "column": 56
        },
        "end": {
          "line": 142,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 4293,
      "end": 4298,
      "loc": {
        "start": {
          "line": 142,
          "column": 57
        },
        "end": {
          "line": 142,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 4298,
      "end": 4299,
      "loc": {
        "start": {
          "line": 142,
          "column": 62
        },
        "end": {
          "line": 142,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 4299,
      "end": 4307,
      "loc": {
        "start": {
          "line": 142,
          "column": 63
        },
        "end": {
          "line": 142,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 4307,
      "end": 4308,
      "loc": {
        "start": {
          "line": 142,
          "column": 71
        },
        "end": {
          "line": 142,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "equal",
      "start": 4308,
      "end": 4313,
      "loc": {
        "start": {
          "line": 142,
          "column": 72
        },
        "end": {
          "line": 142,
          "column": 77
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 4313,
      "end": 4314,
      "loc": {
        "start": {
          "line": 142,
          "column": 77
        },
        "end": {
          "line": 142,
          "column": 78
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `equal` without parameters",
      "start": 4315,
      "end": 4354,
      "loc": {
        "start": {
          "line": 142,
          "column": 79
        },
        "end": {
          "line": 142,
          "column": 118
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 4354,
      "end": 4355,
      "loc": {
        "start": {
          "line": 142,
          "column": 118
        },
        "end": {
          "line": 142,
          "column": 119
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 4355,
      "end": 4356,
      "loc": {
        "start": {
          "line": 142,
          "column": 119
        },
        "end": {
          "line": 142,
          "column": 120
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.filter](http://emberjs.com/api/classes/Ember.computed.html#method_filter)\n *\n * Filters the items in the array by the provided callback.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filter } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filter('chores', function(chore, index, array) {\n *     return !chore.done;\n *   }) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {Function(item: Any, index: Number, array: Array<Any>): Boolean} callback - The function to filter with\n ",
      "start": 4358,
      "end": 5219,
      "loc": {
        "start": {
          "line": 144,
          "column": 0
        },
        "end": {
          "line": 169,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 5220,
      "end": 5226,
      "loc": {
        "start": {
          "line": 170,
          "column": 0
        },
        "end": {
          "line": 170,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 5227,
      "end": 5232,
      "loc": {
        "start": {
          "line": 170,
          "column": 7
        },
        "end": {
          "line": 170,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "filter",
      "start": 5233,
      "end": 5239,
      "loc": {
        "start": {
          "line": 170,
          "column": 13
        },
        "end": {
          "line": 170,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 5240,
      "end": 5241,
      "loc": {
        "start": {
          "line": 170,
          "column": 20
        },
        "end": {
          "line": 170,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 5242,
      "end": 5277,
      "loc": {
        "start": {
          "line": 170,
          "column": 22
        },
        "end": {
          "line": 170,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 5277,
      "end": 5278,
      "loc": {
        "start": {
          "line": 170,
          "column": 57
        },
        "end": {
          "line": 170,
          "column": 58
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 5278,
      "end": 5283,
      "loc": {
        "start": {
          "line": 170,
          "column": 58
        },
        "end": {
          "line": 170,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 5283,
      "end": 5284,
      "loc": {
        "start": {
          "line": 170,
          "column": 63
        },
        "end": {
          "line": 170,
          "column": 64
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 5284,
      "end": 5292,
      "loc": {
        "start": {
          "line": 170,
          "column": 64
        },
        "end": {
          "line": 170,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 5292,
      "end": 5293,
      "loc": {
        "start": {
          "line": 170,
          "column": 72
        },
        "end": {
          "line": 170,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "filter",
      "start": 5293,
      "end": 5299,
      "loc": {
        "start": {
          "line": 170,
          "column": 73
        },
        "end": {
          "line": 170,
          "column": 79
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 5299,
      "end": 5300,
      "loc": {
        "start": {
          "line": 170,
          "column": 79
        },
        "end": {
          "line": 170,
          "column": 80
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `filter` without parameters",
      "start": 5301,
      "end": 5341,
      "loc": {
        "start": {
          "line": 170,
          "column": 81
        },
        "end": {
          "line": 170,
          "column": 121
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 5341,
      "end": 5342,
      "loc": {
        "start": {
          "line": 170,
          "column": 121
        },
        "end": {
          "line": 170,
          "column": 122
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 5342,
      "end": 5343,
      "loc": {
        "start": {
          "line": 170,
          "column": 122
        },
        "end": {
          "line": 170,
          "column": 123
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.filterBy](http://emberjs.com/api/classes/Ember.computed.html#method_filterBy)\n *\n * Filters the array by the property and value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { filterBy } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A([\n *     { name: 'cook', done: true },\n *     { name: 'clean', done: true },\n *     { name: 'write more unit tests', done: false }\n *   ]),\n *\n *   @filterBy('chores', 'done', false) remainingChores // [{name: 'write more unit tests', done: false}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to filter\n * @param {String} propertyKey - Property of the array items to filter by\n * @param {Any} value - Value to filter by\n ",
      "start": 5345,
      "end": 6153,
      "loc": {
        "start": {
          "line": 172,
          "column": 0
        },
        "end": {
          "line": 196,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 6154,
      "end": 6160,
      "loc": {
        "start": {
          "line": 197,
          "column": 0
        },
        "end": {
          "line": 197,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 6161,
      "end": 6166,
      "loc": {
        "start": {
          "line": 197,
          "column": 7
        },
        "end": {
          "line": 197,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "filterBy",
      "start": 6167,
      "end": 6175,
      "loc": {
        "start": {
          "line": 197,
          "column": 13
        },
        "end": {
          "line": 197,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 6176,
      "end": 6177,
      "loc": {
        "start": {
          "line": 197,
          "column": 22
        },
        "end": {
          "line": 197,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 6178,
      "end": 6213,
      "loc": {
        "start": {
          "line": 197,
          "column": 24
        },
        "end": {
          "line": 197,
          "column": 59
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 6213,
      "end": 6214,
      "loc": {
        "start": {
          "line": 197,
          "column": 59
        },
        "end": {
          "line": 197,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 6214,
      "end": 6219,
      "loc": {
        "start": {
          "line": 197,
          "column": 60
        },
        "end": {
          "line": 197,
          "column": 65
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 6219,
      "end": 6220,
      "loc": {
        "start": {
          "line": 197,
          "column": 65
        },
        "end": {
          "line": 197,
          "column": 66
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 6220,
      "end": 6228,
      "loc": {
        "start": {
          "line": 197,
          "column": 66
        },
        "end": {
          "line": 197,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 6228,
      "end": 6229,
      "loc": {
        "start": {
          "line": 197,
          "column": 74
        },
        "end": {
          "line": 197,
          "column": 75
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "filterBy",
      "start": 6229,
      "end": 6237,
      "loc": {
        "start": {
          "line": 197,
          "column": 75
        },
        "end": {
          "line": 197,
          "column": 83
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 6237,
      "end": 6238,
      "loc": {
        "start": {
          "line": 197,
          "column": 83
        },
        "end": {
          "line": 197,
          "column": 84
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `filterBy` without parameters",
      "start": 6239,
      "end": 6281,
      "loc": {
        "start": {
          "line": 197,
          "column": 85
        },
        "end": {
          "line": 197,
          "column": 127
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 6281,
      "end": 6282,
      "loc": {
        "start": {
          "line": 197,
          "column": 127
        },
        "end": {
          "line": 197,
          "column": 128
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 6282,
      "end": 6283,
      "loc": {
        "start": {
          "line": 197,
          "column": 128
        },
        "end": {
          "line": 197,
          "column": 129
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.gt](http://emberjs.com/api/classes/Ember.computed.html#method_gt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gt } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalCats: 11,\n *\n *   @gt('totalCats', 10) isCatParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
      "start": 6285,
      "end": 6881,
      "loc": {
        "start": {
          "line": 199,
          "column": 0
        },
        "end": {
          "line": 219,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 6882,
      "end": 6888,
      "loc": {
        "start": {
          "line": 220,
          "column": 0
        },
        "end": {
          "line": 220,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 6889,
      "end": 6894,
      "loc": {
        "start": {
          "line": 220,
          "column": 7
        },
        "end": {
          "line": 220,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "gt",
      "start": 6895,
      "end": 6897,
      "loc": {
        "start": {
          "line": 220,
          "column": 13
        },
        "end": {
          "line": 220,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 6898,
      "end": 6899,
      "loc": {
        "start": {
          "line": 220,
          "column": 16
        },
        "end": {
          "line": 220,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 6900,
      "end": 6935,
      "loc": {
        "start": {
          "line": 220,
          "column": 18
        },
        "end": {
          "line": 220,
          "column": 53
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 6935,
      "end": 6936,
      "loc": {
        "start": {
          "line": 220,
          "column": 53
        },
        "end": {
          "line": 220,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 6936,
      "end": 6941,
      "loc": {
        "start": {
          "line": 220,
          "column": 54
        },
        "end": {
          "line": 220,
          "column": 59
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 6941,
      "end": 6942,
      "loc": {
        "start": {
          "line": 220,
          "column": 59
        },
        "end": {
          "line": 220,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 6942,
      "end": 6950,
      "loc": {
        "start": {
          "line": 220,
          "column": 60
        },
        "end": {
          "line": 220,
          "column": 68
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 6950,
      "end": 6951,
      "loc": {
        "start": {
          "line": 220,
          "column": 68
        },
        "end": {
          "line": 220,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "gt",
      "start": 6951,
      "end": 6953,
      "loc": {
        "start": {
          "line": 220,
          "column": 69
        },
        "end": {
          "line": 220,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 6953,
      "end": 6954,
      "loc": {
        "start": {
          "line": 220,
          "column": 71
        },
        "end": {
          "line": 220,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `gt` without parameters",
      "start": 6955,
      "end": 6991,
      "loc": {
        "start": {
          "line": 220,
          "column": 73
        },
        "end": {
          "line": 220,
          "column": 109
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 6991,
      "end": 6992,
      "loc": {
        "start": {
          "line": 220,
          "column": 109
        },
        "end": {
          "line": 220,
          "column": 110
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 6992,
      "end": 6993,
      "loc": {
        "start": {
          "line": 220,
          "column": 110
        },
        "end": {
          "line": 220,
          "column": 111
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.gte](http://emberjs.com/api/classes/Ember.computed.html#method_gte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is greater than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { gte } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @gte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
      "start": 6995,
      "end": 7619,
      "loc": {
        "start": {
          "line": 222,
          "column": 0
        },
        "end": {
          "line": 242,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 7620,
      "end": 7626,
      "loc": {
        "start": {
          "line": 243,
          "column": 0
        },
        "end": {
          "line": 243,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 7627,
      "end": 7632,
      "loc": {
        "start": {
          "line": 243,
          "column": 7
        },
        "end": {
          "line": 243,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "gte",
      "start": 7633,
      "end": 7636,
      "loc": {
        "start": {
          "line": 243,
          "column": 13
        },
        "end": {
          "line": 243,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 7637,
      "end": 7638,
      "loc": {
        "start": {
          "line": 243,
          "column": 17
        },
        "end": {
          "line": 243,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 7639,
      "end": 7674,
      "loc": {
        "start": {
          "line": 243,
          "column": 19
        },
        "end": {
          "line": 243,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7674,
      "end": 7675,
      "loc": {
        "start": {
          "line": 243,
          "column": 54
        },
        "end": {
          "line": 243,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 7675,
      "end": 7680,
      "loc": {
        "start": {
          "line": 243,
          "column": 55
        },
        "end": {
          "line": 243,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 7680,
      "end": 7681,
      "loc": {
        "start": {
          "line": 243,
          "column": 60
        },
        "end": {
          "line": 243,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 7681,
      "end": 7689,
      "loc": {
        "start": {
          "line": 243,
          "column": 61
        },
        "end": {
          "line": 243,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 7689,
      "end": 7690,
      "loc": {
        "start": {
          "line": 243,
          "column": 69
        },
        "end": {
          "line": 243,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "gte",
      "start": 7690,
      "end": 7693,
      "loc": {
        "start": {
          "line": 243,
          "column": 70
        },
        "end": {
          "line": 243,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 7693,
      "end": 7694,
      "loc": {
        "start": {
          "line": 243,
          "column": 73
        },
        "end": {
          "line": 243,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `gte` without parameters",
      "start": 7695,
      "end": 7732,
      "loc": {
        "start": {
          "line": 243,
          "column": 75
        },
        "end": {
          "line": 243,
          "column": 112
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 7732,
      "end": 7733,
      "loc": {
        "start": {
          "line": 243,
          "column": 112
        },
        "end": {
          "line": 243,
          "column": 113
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 7733,
      "end": 7734,
      "loc": {
        "start": {
          "line": 243,
          "column": 113
        },
        "end": {
          "line": 243,
          "column": 114
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.intersect](http://emberjs.com/api/classes/Ember.computed.html#method_intersect)\n *\n * A computed property which returns a new array with all the duplicated\n * elements from two or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { intersect } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @intersect('likes', 'foods') favoriteFoods // ['tacos', 'pizza']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to intersect\n ",
      "start": 7736,
      "end": 8408,
      "loc": {
        "start": {
          "line": 245,
          "column": 0
        },
        "end": {
          "line": 265,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 8409,
      "end": 8415,
      "loc": {
        "start": {
          "line": 266,
          "column": 0
        },
        "end": {
          "line": 266,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 8416,
      "end": 8421,
      "loc": {
        "start": {
          "line": 266,
          "column": 7
        },
        "end": {
          "line": 266,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "intersect",
      "start": 8422,
      "end": 8431,
      "loc": {
        "start": {
          "line": 266,
          "column": 13
        },
        "end": {
          "line": 266,
          "column": 22
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 8432,
      "end": 8433,
      "loc": {
        "start": {
          "line": 266,
          "column": 23
        },
        "end": {
          "line": 266,
          "column": 24
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 8434,
      "end": 8469,
      "loc": {
        "start": {
          "line": 266,
          "column": 25
        },
        "end": {
          "line": 266,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 8469,
      "end": 8470,
      "loc": {
        "start": {
          "line": 266,
          "column": 60
        },
        "end": {
          "line": 266,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 8470,
      "end": 8475,
      "loc": {
        "start": {
          "line": 266,
          "column": 61
        },
        "end": {
          "line": 266,
          "column": 66
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 8475,
      "end": 8476,
      "loc": {
        "start": {
          "line": 266,
          "column": 66
        },
        "end": {
          "line": 266,
          "column": 67
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 8476,
      "end": 8484,
      "loc": {
        "start": {
          "line": 266,
          "column": 67
        },
        "end": {
          "line": 266,
          "column": 75
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 8484,
      "end": 8485,
      "loc": {
        "start": {
          "line": 266,
          "column": 75
        },
        "end": {
          "line": 266,
          "column": 76
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "intersect",
      "start": 8485,
      "end": 8494,
      "loc": {
        "start": {
          "line": 266,
          "column": 76
        },
        "end": {
          "line": 266,
          "column": 85
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 8494,
      "end": 8495,
      "loc": {
        "start": {
          "line": 266,
          "column": 85
        },
        "end": {
          "line": 266,
          "column": 86
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `intersect` without parameters",
      "start": 8496,
      "end": 8539,
      "loc": {
        "start": {
          "line": 266,
          "column": 87
        },
        "end": {
          "line": 266,
          "column": 130
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 8539,
      "end": 8540,
      "loc": {
        "start": {
          "line": 266,
          "column": 130
        },
        "end": {
          "line": 266,
          "column": 131
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 8540,
      "end": 8541,
      "loc": {
        "start": {
          "line": 266,
          "column": 131
        },
        "end": {
          "line": 266,
          "column": 132
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.lt](http://emberjs.com/api/classes/Ember.computed.html#method_lt)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lt } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalDogs: 3,\n *\n *   @lt('totalDogs', 10) isDogParty // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
      "start": 8543,
      "end": 9135,
      "loc": {
        "start": {
          "line": 268,
          "column": 0
        },
        "end": {
          "line": 288,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 9136,
      "end": 9142,
      "loc": {
        "start": {
          "line": 289,
          "column": 0
        },
        "end": {
          "line": 289,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 9143,
      "end": 9148,
      "loc": {
        "start": {
          "line": 289,
          "column": 7
        },
        "end": {
          "line": 289,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "lt",
      "start": 9149,
      "end": 9151,
      "loc": {
        "start": {
          "line": 289,
          "column": 13
        },
        "end": {
          "line": 289,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 9152,
      "end": 9153,
      "loc": {
        "start": {
          "line": 289,
          "column": 16
        },
        "end": {
          "line": 289,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 9154,
      "end": 9189,
      "loc": {
        "start": {
          "line": 289,
          "column": 18
        },
        "end": {
          "line": 289,
          "column": 53
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9189,
      "end": 9190,
      "loc": {
        "start": {
          "line": 289,
          "column": 53
        },
        "end": {
          "line": 289,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 9190,
      "end": 9195,
      "loc": {
        "start": {
          "line": 289,
          "column": 54
        },
        "end": {
          "line": 289,
          "column": 59
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 9195,
      "end": 9196,
      "loc": {
        "start": {
          "line": 289,
          "column": 59
        },
        "end": {
          "line": 289,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 9196,
      "end": 9204,
      "loc": {
        "start": {
          "line": 289,
          "column": 60
        },
        "end": {
          "line": 289,
          "column": 68
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 9204,
      "end": 9205,
      "loc": {
        "start": {
          "line": 289,
          "column": 68
        },
        "end": {
          "line": 289,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "lt",
      "start": 9205,
      "end": 9207,
      "loc": {
        "start": {
          "line": 289,
          "column": 69
        },
        "end": {
          "line": 289,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 9207,
      "end": 9208,
      "loc": {
        "start": {
          "line": 289,
          "column": 71
        },
        "end": {
          "line": 289,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `lt` without parameters",
      "start": 9209,
      "end": 9245,
      "loc": {
        "start": {
          "line": 289,
          "column": 73
        },
        "end": {
          "line": 289,
          "column": 109
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9245,
      "end": 9246,
      "loc": {
        "start": {
          "line": 289,
          "column": 109
        },
        "end": {
          "line": 289,
          "column": 110
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 9246,
      "end": 9247,
      "loc": {
        "start": {
          "line": 289,
          "column": 110
        },
        "end": {
          "line": 289,
          "column": 111
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.lte](http://emberjs.com/api/classes/Ember.computed.html#method_lte)\n *\n * A computed property that returns `true` if the provided dependent property\n * is less than or equal to the provided value.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { lte } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   totalPlayers: 14,\n *\n *   @lte('totalPlayers', 14) hasEnoughPlayers // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to compare\n * @param {Number} value - Value to compare against\n ",
      "start": 9249,
      "end": 9870,
      "loc": {
        "start": {
          "line": 291,
          "column": 0
        },
        "end": {
          "line": 311,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 9871,
      "end": 9877,
      "loc": {
        "start": {
          "line": 312,
          "column": 0
        },
        "end": {
          "line": 312,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 9878,
      "end": 9883,
      "loc": {
        "start": {
          "line": 312,
          "column": 7
        },
        "end": {
          "line": 312,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "lte",
      "start": 9884,
      "end": 9887,
      "loc": {
        "start": {
          "line": 312,
          "column": 13
        },
        "end": {
          "line": 312,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 9888,
      "end": 9889,
      "loc": {
        "start": {
          "line": 312,
          "column": 17
        },
        "end": {
          "line": 312,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 9890,
      "end": 9925,
      "loc": {
        "start": {
          "line": 312,
          "column": 19
        },
        "end": {
          "line": 312,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9925,
      "end": 9926,
      "loc": {
        "start": {
          "line": 312,
          "column": 54
        },
        "end": {
          "line": 312,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 9926,
      "end": 9931,
      "loc": {
        "start": {
          "line": 312,
          "column": 55
        },
        "end": {
          "line": 312,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 9931,
      "end": 9932,
      "loc": {
        "start": {
          "line": 312,
          "column": 60
        },
        "end": {
          "line": 312,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 9932,
      "end": 9940,
      "loc": {
        "start": {
          "line": 312,
          "column": 61
        },
        "end": {
          "line": 312,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 9940,
      "end": 9941,
      "loc": {
        "start": {
          "line": 312,
          "column": 69
        },
        "end": {
          "line": 312,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "lte",
      "start": 9941,
      "end": 9944,
      "loc": {
        "start": {
          "line": 312,
          "column": 70
        },
        "end": {
          "line": 312,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 9944,
      "end": 9945,
      "loc": {
        "start": {
          "line": 312,
          "column": 73
        },
        "end": {
          "line": 312,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `lte` without parameters",
      "start": 9946,
      "end": 9983,
      "loc": {
        "start": {
          "line": 312,
          "column": 75
        },
        "end": {
          "line": 312,
          "column": 112
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 9983,
      "end": 9984,
      "loc": {
        "start": {
          "line": 312,
          "column": 112
        },
        "end": {
          "line": 312,
          "column": 113
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 9984,
      "end": 9985,
      "loc": {
        "start": {
          "line": 312,
          "column": 113
        },
        "end": {
          "line": 312,
          "column": 114
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.map](http://emberjs.com/api/classes/Ember.computed.html#method_map)\n *\n * Returns an array mapped via the callback\n *\n * ```javascript\n * import Ember from 'ember';\n * import { map } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   chores: Ember.A(['clean', 'write more unit tests']),\n *\n *   @map('chores', function(chore, index) {\n *     return chore.toUpperCase() + '!';\n *   }) loudChores // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {Function(item: Any, index: Number): Any} callback - Function to map over the array\n ",
      "start": 9987,
      "end": 10691,
      "loc": {
        "start": {
          "line": 314,
          "column": 0
        },
        "end": {
          "line": 335,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 10692,
      "end": 10698,
      "loc": {
        "start": {
          "line": 336,
          "column": 0
        },
        "end": {
          "line": 336,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 10699,
      "end": 10704,
      "loc": {
        "start": {
          "line": 336,
          "column": 7
        },
        "end": {
          "line": 336,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "map",
      "start": 10705,
      "end": 10708,
      "loc": {
        "start": {
          "line": 336,
          "column": 13
        },
        "end": {
          "line": 336,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 10709,
      "end": 10710,
      "loc": {
        "start": {
          "line": 336,
          "column": 17
        },
        "end": {
          "line": 336,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 10711,
      "end": 10746,
      "loc": {
        "start": {
          "line": 336,
          "column": 19
        },
        "end": {
          "line": 336,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 10746,
      "end": 10747,
      "loc": {
        "start": {
          "line": 336,
          "column": 54
        },
        "end": {
          "line": 336,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 10747,
      "end": 10752,
      "loc": {
        "start": {
          "line": 336,
          "column": 55
        },
        "end": {
          "line": 336,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 10752,
      "end": 10753,
      "loc": {
        "start": {
          "line": 336,
          "column": 60
        },
        "end": {
          "line": 336,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 10753,
      "end": 10761,
      "loc": {
        "start": {
          "line": 336,
          "column": 61
        },
        "end": {
          "line": 336,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 10761,
      "end": 10762,
      "loc": {
        "start": {
          "line": 336,
          "column": 69
        },
        "end": {
          "line": 336,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "map",
      "start": 10762,
      "end": 10765,
      "loc": {
        "start": {
          "line": 336,
          "column": 70
        },
        "end": {
          "line": 336,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 10765,
      "end": 10766,
      "loc": {
        "start": {
          "line": 336,
          "column": 73
        },
        "end": {
          "line": 336,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `map` without parameters",
      "start": 10767,
      "end": 10804,
      "loc": {
        "start": {
          "line": 336,
          "column": 75
        },
        "end": {
          "line": 336,
          "column": 112
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 10804,
      "end": 10805,
      "loc": {
        "start": {
          "line": 336,
          "column": 112
        },
        "end": {
          "line": 336,
          "column": 113
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 10805,
      "end": 10806,
      "loc": {
        "start": {
          "line": 336,
          "column": 113
        },
        "end": {
          "line": 336,
          "column": 114
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.mapBy](http://emberjs.com/api/classes/Ember.computed.html#method_mapBy)\n *\n * Returns an array mapped to the specified key.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { mapBy } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   people: Ember.A([\n *     {name: \"George\", age: 5},\n *     {name: \"Stella\", age: 10},\n *     {name: \"Violet\", age: 7}\n *   ]),\n *\n *   @mapBy('people', 'age') ages // [5, 10, 7]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to map over\n * @param {String} propertyKey - Property of the array items to map by\n ",
      "start": 10808,
      "end": 11476,
      "loc": {
        "start": {
          "line": 338,
          "column": 0
        },
        "end": {
          "line": 361,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 11477,
      "end": 11483,
      "loc": {
        "start": {
          "line": 362,
          "column": 0
        },
        "end": {
          "line": 362,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 11484,
      "end": 11489,
      "loc": {
        "start": {
          "line": 362,
          "column": 7
        },
        "end": {
          "line": 362,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "mapBy",
      "start": 11490,
      "end": 11495,
      "loc": {
        "start": {
          "line": 362,
          "column": 13
        },
        "end": {
          "line": 362,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 11496,
      "end": 11497,
      "loc": {
        "start": {
          "line": 362,
          "column": 19
        },
        "end": {
          "line": 362,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 11498,
      "end": 11533,
      "loc": {
        "start": {
          "line": 362,
          "column": 21
        },
        "end": {
          "line": 362,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 11533,
      "end": 11534,
      "loc": {
        "start": {
          "line": 362,
          "column": 56
        },
        "end": {
          "line": 362,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 11534,
      "end": 11539,
      "loc": {
        "start": {
          "line": 362,
          "column": 57
        },
        "end": {
          "line": 362,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 11539,
      "end": 11540,
      "loc": {
        "start": {
          "line": 362,
          "column": 62
        },
        "end": {
          "line": 362,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 11540,
      "end": 11548,
      "loc": {
        "start": {
          "line": 362,
          "column": 63
        },
        "end": {
          "line": 362,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 11548,
      "end": 11549,
      "loc": {
        "start": {
          "line": 362,
          "column": 71
        },
        "end": {
          "line": 362,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "mapBy",
      "start": 11549,
      "end": 11554,
      "loc": {
        "start": {
          "line": 362,
          "column": 72
        },
        "end": {
          "line": 362,
          "column": 77
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 11554,
      "end": 11555,
      "loc": {
        "start": {
          "line": 362,
          "column": 77
        },
        "end": {
          "line": 362,
          "column": 78
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `mapBy` without parameters",
      "start": 11556,
      "end": 11595,
      "loc": {
        "start": {
          "line": 362,
          "column": 79
        },
        "end": {
          "line": 362,
          "column": 118
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 11595,
      "end": 11596,
      "loc": {
        "start": {
          "line": 362,
          "column": 118
        },
        "end": {
          "line": 362,
          "column": 119
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 11596,
      "end": 11597,
      "loc": {
        "start": {
          "line": 362,
          "column": 119
        },
        "end": {
          "line": 362,
          "column": 120
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.match](http://emberjs.com/api/classes/Ember.computed.html#method_match)\n *\n * A computed property which matches the original value for the dependent\n * property against a given RegExp, returning `true` if they values matches\n * the RegExp and `false` if it does not.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { match } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   email: 'tomster@emberjs.com',\n *\n *   @match('email', /^.+@.+\\..+$/) validEmail\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The property to match\n * @param {RegExp} pattern - The pattern to match against\n ",
      "start": 11599,
      "end": 12292,
      "loc": {
        "start": {
          "line": 364,
          "column": 0
        },
        "end": {
          "line": 385,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 12293,
      "end": 12299,
      "loc": {
        "start": {
          "line": 386,
          "column": 0
        },
        "end": {
          "line": 386,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 12300,
      "end": 12305,
      "loc": {
        "start": {
          "line": 386,
          "column": 7
        },
        "end": {
          "line": 386,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "match",
      "start": 12306,
      "end": 12311,
      "loc": {
        "start": {
          "line": 386,
          "column": 13
        },
        "end": {
          "line": 386,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 12312,
      "end": 12313,
      "loc": {
        "start": {
          "line": 386,
          "column": 19
        },
        "end": {
          "line": 386,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 12314,
      "end": 12349,
      "loc": {
        "start": {
          "line": 386,
          "column": 21
        },
        "end": {
          "line": 386,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 12349,
      "end": 12350,
      "loc": {
        "start": {
          "line": 386,
          "column": 56
        },
        "end": {
          "line": 386,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 12350,
      "end": 12355,
      "loc": {
        "start": {
          "line": 386,
          "column": 57
        },
        "end": {
          "line": 386,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 12355,
      "end": 12356,
      "loc": {
        "start": {
          "line": 386,
          "column": 62
        },
        "end": {
          "line": 386,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 12356,
      "end": 12364,
      "loc": {
        "start": {
          "line": 386,
          "column": 63
        },
        "end": {
          "line": 386,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 12364,
      "end": 12365,
      "loc": {
        "start": {
          "line": 386,
          "column": 71
        },
        "end": {
          "line": 386,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "match",
      "start": 12365,
      "end": 12370,
      "loc": {
        "start": {
          "line": 386,
          "column": 72
        },
        "end": {
          "line": 386,
          "column": 77
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 12370,
      "end": 12371,
      "loc": {
        "start": {
          "line": 386,
          "column": 77
        },
        "end": {
          "line": 386,
          "column": 78
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `match` without parameters",
      "start": 12372,
      "end": 12411,
      "loc": {
        "start": {
          "line": 386,
          "column": 79
        },
        "end": {
          "line": 386,
          "column": 118
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 12411,
      "end": 12412,
      "loc": {
        "start": {
          "line": 386,
          "column": 118
        },
        "end": {
          "line": 386,
          "column": 119
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 12412,
      "end": 12413,
      "loc": {
        "start": {
          "line": 386,
          "column": 119
        },
        "end": {
          "line": 386,
          "column": 120
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.max](http://emberjs.com/api/classes/Ember.computed.html#method_max)\n *\n * A computed property that calculates the maximum value in the dependent\n * array. This will return `-Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { max } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @max('values') maxValue // 10\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
      "start": 12415,
      "end": 13011,
      "loc": {
        "start": {
          "line": 388,
          "column": 0
        },
        "end": {
          "line": 407,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 13012,
      "end": 13018,
      "loc": {
        "start": {
          "line": 408,
          "column": 0
        },
        "end": {
          "line": 408,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 13019,
      "end": 13024,
      "loc": {
        "start": {
          "line": 408,
          "column": 7
        },
        "end": {
          "line": 408,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "max",
      "start": 13025,
      "end": 13028,
      "loc": {
        "start": {
          "line": 408,
          "column": 13
        },
        "end": {
          "line": 408,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 13029,
      "end": 13030,
      "loc": {
        "start": {
          "line": 408,
          "column": 17
        },
        "end": {
          "line": 408,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 13031,
      "end": 13066,
      "loc": {
        "start": {
          "line": 408,
          "column": 19
        },
        "end": {
          "line": 408,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 13066,
      "end": 13067,
      "loc": {
        "start": {
          "line": 408,
          "column": 54
        },
        "end": {
          "line": 408,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 13067,
      "end": 13072,
      "loc": {
        "start": {
          "line": 408,
          "column": 55
        },
        "end": {
          "line": 408,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13072,
      "end": 13073,
      "loc": {
        "start": {
          "line": 408,
          "column": 60
        },
        "end": {
          "line": 408,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 13073,
      "end": 13081,
      "loc": {
        "start": {
          "line": 408,
          "column": 61
        },
        "end": {
          "line": 408,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13081,
      "end": 13082,
      "loc": {
        "start": {
          "line": 408,
          "column": 69
        },
        "end": {
          "line": 408,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "max",
      "start": 13082,
      "end": 13085,
      "loc": {
        "start": {
          "line": 408,
          "column": 70
        },
        "end": {
          "line": 408,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13085,
      "end": 13086,
      "loc": {
        "start": {
          "line": 408,
          "column": 73
        },
        "end": {
          "line": 408,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `max` without parameters",
      "start": 13087,
      "end": 13124,
      "loc": {
        "start": {
          "line": 408,
          "column": 75
        },
        "end": {
          "line": 408,
          "column": 112
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 13124,
      "end": 13125,
      "loc": {
        "start": {
          "line": 408,
          "column": 112
        },
        "end": {
          "line": 408,
          "column": 113
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13125,
      "end": 13126,
      "loc": {
        "start": {
          "line": 408,
          "column": 113
        },
        "end": {
          "line": 408,
          "column": 114
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.min](http://emberjs.com/api/classes/Ember.computed.html#method_min)\n *\n * A computed property that calculates the minimum value in the dependent\n * array. This will return `Infinity` when the dependent array is empty.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { min } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 5, 10]),\n *\n *   @min('values') minValue // 1\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the array to find the max value of\n ",
      "start": 13128,
      "end": 13722,
      "loc": {
        "start": {
          "line": 410,
          "column": 0
        },
        "end": {
          "line": 429,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 13723,
      "end": 13729,
      "loc": {
        "start": {
          "line": 430,
          "column": 0
        },
        "end": {
          "line": 430,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 13730,
      "end": 13735,
      "loc": {
        "start": {
          "line": 430,
          "column": 7
        },
        "end": {
          "line": 430,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "min",
      "start": 13736,
      "end": 13739,
      "loc": {
        "start": {
          "line": 430,
          "column": 13
        },
        "end": {
          "line": 430,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 13740,
      "end": 13741,
      "loc": {
        "start": {
          "line": 430,
          "column": 17
        },
        "end": {
          "line": 430,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 13742,
      "end": 13777,
      "loc": {
        "start": {
          "line": 430,
          "column": 19
        },
        "end": {
          "line": 430,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 13777,
      "end": 13778,
      "loc": {
        "start": {
          "line": 430,
          "column": 54
        },
        "end": {
          "line": 430,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 13778,
      "end": 13783,
      "loc": {
        "start": {
          "line": 430,
          "column": 55
        },
        "end": {
          "line": 430,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13783,
      "end": 13784,
      "loc": {
        "start": {
          "line": 430,
          "column": 60
        },
        "end": {
          "line": 430,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 13784,
      "end": 13792,
      "loc": {
        "start": {
          "line": 430,
          "column": 61
        },
        "end": {
          "line": 430,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13792,
      "end": 13793,
      "loc": {
        "start": {
          "line": 430,
          "column": 69
        },
        "end": {
          "line": 430,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "min",
      "start": 13793,
      "end": 13796,
      "loc": {
        "start": {
          "line": 430,
          "column": 70
        },
        "end": {
          "line": 430,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13796,
      "end": 13797,
      "loc": {
        "start": {
          "line": 430,
          "column": 73
        },
        "end": {
          "line": 430,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `min` without parameters",
      "start": 13798,
      "end": 13835,
      "loc": {
        "start": {
          "line": 430,
          "column": 75
        },
        "end": {
          "line": 430,
          "column": 112
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 13835,
      "end": 13836,
      "loc": {
        "start": {
          "line": 430,
          "column": 112
        },
        "end": {
          "line": 430,
          "column": 113
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 13836,
      "end": 13837,
      "loc": {
        "start": {
          "line": 430,
          "column": 113
        },
        "end": {
          "line": 430,
          "column": 114
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.none](http://emberjs.com/api/classes/Ember.computed.html#method_none)\n *\n * A computed property that returns true if the value of the dependent property\n * is null or undefined. This avoids errors from JSLint complaining about use\n * of `==`, which can be technically confusing.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { none } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   firstName: null,\n *\n *   @none('firstName') isNameless // true until firstName is defined\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
      "start": 13839,
      "end": 14503,
      "loc": {
        "start": {
          "line": 432,
          "column": 0
        },
        "end": {
          "line": 452,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 14504,
      "end": 14510,
      "loc": {
        "start": {
          "line": 453,
          "column": 0
        },
        "end": {
          "line": 453,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 14511,
      "end": 14516,
      "loc": {
        "start": {
          "line": 453,
          "column": 7
        },
        "end": {
          "line": 453,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "none",
      "start": 14517,
      "end": 14521,
      "loc": {
        "start": {
          "line": 453,
          "column": 13
        },
        "end": {
          "line": 453,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 14522,
      "end": 14523,
      "loc": {
        "start": {
          "line": 453,
          "column": 18
        },
        "end": {
          "line": 453,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 14524,
      "end": 14559,
      "loc": {
        "start": {
          "line": 453,
          "column": 20
        },
        "end": {
          "line": 453,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 14559,
      "end": 14560,
      "loc": {
        "start": {
          "line": 453,
          "column": 55
        },
        "end": {
          "line": 453,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 14560,
      "end": 14565,
      "loc": {
        "start": {
          "line": 453,
          "column": 56
        },
        "end": {
          "line": 453,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 14565,
      "end": 14566,
      "loc": {
        "start": {
          "line": 453,
          "column": 61
        },
        "end": {
          "line": 453,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 14566,
      "end": 14574,
      "loc": {
        "start": {
          "line": 453,
          "column": 62
        },
        "end": {
          "line": 453,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 14574,
      "end": 14575,
      "loc": {
        "start": {
          "line": 453,
          "column": 70
        },
        "end": {
          "line": 453,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "none",
      "start": 14575,
      "end": 14579,
      "loc": {
        "start": {
          "line": 453,
          "column": 71
        },
        "end": {
          "line": 453,
          "column": 75
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 14579,
      "end": 14580,
      "loc": {
        "start": {
          "line": 453,
          "column": 75
        },
        "end": {
          "line": 453,
          "column": 76
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `none` without parameters",
      "start": 14581,
      "end": 14619,
      "loc": {
        "start": {
          "line": 453,
          "column": 77
        },
        "end": {
          "line": 453,
          "column": 115
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 14619,
      "end": 14620,
      "loc": {
        "start": {
          "line": 453,
          "column": 115
        },
        "end": {
          "line": 453,
          "column": 116
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 14620,
      "end": 14621,
      "loc": {
        "start": {
          "line": 453,
          "column": 116
        },
        "end": {
          "line": 453,
          "column": 117
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.not](http://emberjs.com/api/classes/Ember.computed.html#method_not)\n *\n * A computed property that returns the inverse boolean value of the original\n * value for the dependent property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { not } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   loggedIn: false,\n *\n *   @not('loggedIn') isAnonymous // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to `not`\n ",
      "start": 14623,
      "end": 15165,
      "loc": {
        "start": {
          "line": 455,
          "column": 0
        },
        "end": {
          "line": 474,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 15166,
      "end": 15172,
      "loc": {
        "start": {
          "line": 475,
          "column": 0
        },
        "end": {
          "line": 475,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 15173,
      "end": 15178,
      "loc": {
        "start": {
          "line": 475,
          "column": 7
        },
        "end": {
          "line": 475,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "not",
      "start": 15179,
      "end": 15182,
      "loc": {
        "start": {
          "line": 475,
          "column": 13
        },
        "end": {
          "line": 475,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 15183,
      "end": 15184,
      "loc": {
        "start": {
          "line": 475,
          "column": 17
        },
        "end": {
          "line": 475,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 15185,
      "end": 15220,
      "loc": {
        "start": {
          "line": 475,
          "column": 19
        },
        "end": {
          "line": 475,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 15220,
      "end": 15221,
      "loc": {
        "start": {
          "line": 475,
          "column": 54
        },
        "end": {
          "line": 475,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 15221,
      "end": 15226,
      "loc": {
        "start": {
          "line": 475,
          "column": 55
        },
        "end": {
          "line": 475,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 15226,
      "end": 15227,
      "loc": {
        "start": {
          "line": 475,
          "column": 60
        },
        "end": {
          "line": 475,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 15227,
      "end": 15235,
      "loc": {
        "start": {
          "line": 475,
          "column": 61
        },
        "end": {
          "line": 475,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 15235,
      "end": 15236,
      "loc": {
        "start": {
          "line": 475,
          "column": 69
        },
        "end": {
          "line": 475,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "not",
      "start": 15236,
      "end": 15239,
      "loc": {
        "start": {
          "line": 475,
          "column": 70
        },
        "end": {
          "line": 475,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 15239,
      "end": 15240,
      "loc": {
        "start": {
          "line": 475,
          "column": 73
        },
        "end": {
          "line": 475,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `not` without parameters",
      "start": 15241,
      "end": 15278,
      "loc": {
        "start": {
          "line": 475,
          "column": 75
        },
        "end": {
          "line": 475,
          "column": 112
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 15278,
      "end": 15279,
      "loc": {
        "start": {
          "line": 475,
          "column": 112
        },
        "end": {
          "line": 475,
          "column": 113
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 15279,
      "end": 15280,
      "loc": {
        "start": {
          "line": 475,
          "column": 113
        },
        "end": {
          "line": 475,
          "column": 114
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.notEmpty](http://emberjs.com/api/classes/Ember.computed.html#method_notEmpty)\n *\n * A computed property that returns `true` if the value of the dependent\n * property is NOT null, an empty string, empty array, or empty function.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { notEmpty } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   groceryBag: Ember.A(['milk', 'eggs', 'apples']),\n *\n *   @notEmpty('groceryBag') hasGroceriesToPutAway // true\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to check\n ",
      "start": 15282,
      "end": 15920,
      "loc": {
        "start": {
          "line": 477,
          "column": 0
        },
        "end": {
          "line": 496,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 15921,
      "end": 15927,
      "loc": {
        "start": {
          "line": 497,
          "column": 0
        },
        "end": {
          "line": 497,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 15928,
      "end": 15933,
      "loc": {
        "start": {
          "line": 497,
          "column": 7
        },
        "end": {
          "line": 497,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "notEmpty",
      "start": 15934,
      "end": 15942,
      "loc": {
        "start": {
          "line": 497,
          "column": 13
        },
        "end": {
          "line": 497,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 15943,
      "end": 15944,
      "loc": {
        "start": {
          "line": 497,
          "column": 22
        },
        "end": {
          "line": 497,
          "column": 23
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 15945,
      "end": 15980,
      "loc": {
        "start": {
          "line": 497,
          "column": 24
        },
        "end": {
          "line": 497,
          "column": 59
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 15980,
      "end": 15981,
      "loc": {
        "start": {
          "line": 497,
          "column": 59
        },
        "end": {
          "line": 497,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 15981,
      "end": 15986,
      "loc": {
        "start": {
          "line": 497,
          "column": 60
        },
        "end": {
          "line": 497,
          "column": 65
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 15986,
      "end": 15987,
      "loc": {
        "start": {
          "line": 497,
          "column": 65
        },
        "end": {
          "line": 497,
          "column": 66
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 15987,
      "end": 15995,
      "loc": {
        "start": {
          "line": 497,
          "column": 66
        },
        "end": {
          "line": 497,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 15995,
      "end": 15996,
      "loc": {
        "start": {
          "line": 497,
          "column": 74
        },
        "end": {
          "line": 497,
          "column": 75
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "notEmpty",
      "start": 15996,
      "end": 16004,
      "loc": {
        "start": {
          "line": 497,
          "column": 75
        },
        "end": {
          "line": 497,
          "column": 83
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 16004,
      "end": 16005,
      "loc": {
        "start": {
          "line": 497,
          "column": 83
        },
        "end": {
          "line": 497,
          "column": 84
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `notEmpty` without parameters",
      "start": 16006,
      "end": 16048,
      "loc": {
        "start": {
          "line": 497,
          "column": 85
        },
        "end": {
          "line": 497,
          "column": 127
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 16048,
      "end": 16049,
      "loc": {
        "start": {
          "line": 497,
          "column": 127
        },
        "end": {
          "line": 497,
          "column": 128
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 16049,
      "end": 16050,
      "loc": {
        "start": {
          "line": 497,
          "column": 128
        },
        "end": {
          "line": 497,
          "column": 129
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.oneWay](http://emberjs.com/api/classes/Ember.computed.html#method_oneWay)\n *\n * Where `computed.alias` aliases `get` and `set`, and allows for bidirectional\n * data flow, `computed.oneWay` only provides an aliased `get`. The `set` will\n * not mutate the upstream property, rather causes the current property to\n * become the value set. This causes the downstream property to permanently\n * diverge from the upstream property.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { oneWay } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   firstName: 'Joe',\n *\n *   @oneWay('firstName') originalName // will always be 'Joe'\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to alias\n ",
      "start": 16052,
      "end": 16859,
      "loc": {
        "start": {
          "line": 499,
          "column": 0
        },
        "end": {
          "line": 521,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 16860,
      "end": 16866,
      "loc": {
        "start": {
          "line": 522,
          "column": 0
        },
        "end": {
          "line": 522,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 16867,
      "end": 16872,
      "loc": {
        "start": {
          "line": 522,
          "column": 7
        },
        "end": {
          "line": 522,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "oneWay",
      "start": 16873,
      "end": 16879,
      "loc": {
        "start": {
          "line": 522,
          "column": 13
        },
        "end": {
          "line": 522,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 16880,
      "end": 16881,
      "loc": {
        "start": {
          "line": 522,
          "column": 20
        },
        "end": {
          "line": 522,
          "column": 21
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 16882,
      "end": 16917,
      "loc": {
        "start": {
          "line": 522,
          "column": 22
        },
        "end": {
          "line": 522,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 16917,
      "end": 16918,
      "loc": {
        "start": {
          "line": 522,
          "column": 57
        },
        "end": {
          "line": 522,
          "column": 58
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 16918,
      "end": 16923,
      "loc": {
        "start": {
          "line": 522,
          "column": 58
        },
        "end": {
          "line": 522,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 16923,
      "end": 16924,
      "loc": {
        "start": {
          "line": 522,
          "column": 63
        },
        "end": {
          "line": 522,
          "column": 64
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 16924,
      "end": 16932,
      "loc": {
        "start": {
          "line": 522,
          "column": 64
        },
        "end": {
          "line": 522,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 16932,
      "end": 16933,
      "loc": {
        "start": {
          "line": 522,
          "column": 72
        },
        "end": {
          "line": 522,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "oneWay",
      "start": 16933,
      "end": 16939,
      "loc": {
        "start": {
          "line": 522,
          "column": 73
        },
        "end": {
          "line": 522,
          "column": 79
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 16939,
      "end": 16940,
      "loc": {
        "start": {
          "line": 522,
          "column": 79
        },
        "end": {
          "line": 522,
          "column": 80
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `oneWay` without parameters",
      "start": 16941,
      "end": 16981,
      "loc": {
        "start": {
          "line": 522,
          "column": 81
        },
        "end": {
          "line": 522,
          "column": 121
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 16981,
      "end": 16982,
      "loc": {
        "start": {
          "line": 522,
          "column": 121
        },
        "end": {
          "line": 522,
          "column": 122
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 16982,
      "end": 16983,
      "loc": {
        "start": {
          "line": 522,
          "column": 122
        },
        "end": {
          "line": 522,
          "column": 123
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.or](http://emberjs.com/api/classes/Ember.computed.html#method_or)\n *\n * A computed property which performs a logical or on the original values for\n * the provided dependent properties.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { or } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   hasJacket: true,\n *   hasUmbrella: false,\n *\n *   @or('hasJacket', 'hasUmbrella') isReadyForRain // true\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKey - Key for the properties to `or`\n ",
      "start": 16985,
      "end": 17572,
      "loc": {
        "start": {
          "line": 524,
          "column": 0
        },
        "end": {
          "line": 544,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 17573,
      "end": 17579,
      "loc": {
        "start": {
          "line": 545,
          "column": 0
        },
        "end": {
          "line": 545,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 17580,
      "end": 17585,
      "loc": {
        "start": {
          "line": 545,
          "column": 7
        },
        "end": {
          "line": 545,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "or",
      "start": 17586,
      "end": 17588,
      "loc": {
        "start": {
          "line": 545,
          "column": 13
        },
        "end": {
          "line": 545,
          "column": 15
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 17589,
      "end": 17590,
      "loc": {
        "start": {
          "line": 545,
          "column": 16
        },
        "end": {
          "line": 545,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 17591,
      "end": 17626,
      "loc": {
        "start": {
          "line": 545,
          "column": 18
        },
        "end": {
          "line": 545,
          "column": 53
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 17626,
      "end": 17627,
      "loc": {
        "start": {
          "line": 545,
          "column": 53
        },
        "end": {
          "line": 545,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 17627,
      "end": 17632,
      "loc": {
        "start": {
          "line": 545,
          "column": 54
        },
        "end": {
          "line": 545,
          "column": 59
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 17632,
      "end": 17633,
      "loc": {
        "start": {
          "line": 545,
          "column": 59
        },
        "end": {
          "line": 545,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 17633,
      "end": 17641,
      "loc": {
        "start": {
          "line": 545,
          "column": 60
        },
        "end": {
          "line": 545,
          "column": 68
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 17641,
      "end": 17642,
      "loc": {
        "start": {
          "line": 545,
          "column": 68
        },
        "end": {
          "line": 545,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "or",
      "start": 17642,
      "end": 17644,
      "loc": {
        "start": {
          "line": 545,
          "column": 69
        },
        "end": {
          "line": 545,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 17644,
      "end": 17645,
      "loc": {
        "start": {
          "line": 545,
          "column": 71
        },
        "end": {
          "line": 545,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `or` without parameters",
      "start": 17646,
      "end": 17682,
      "loc": {
        "start": {
          "line": 545,
          "column": 73
        },
        "end": {
          "line": 545,
          "column": 109
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 17682,
      "end": 17683,
      "loc": {
        "start": {
          "line": 545,
          "column": 109
        },
        "end": {
          "line": 545,
          "column": 110
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 17683,
      "end": 17684,
      "loc": {
        "start": {
          "line": 545,
          "column": 110
        },
        "end": {
          "line": 545,
          "column": 111
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.reads](http://emberjs.com/api/classes/Ember.computed.html#method_reads)\n *\n * This is a more semantically meaningful alias of `computed.oneWay`, whose\n * name is somewhat ambiguous as to which direction the data flows.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { reads } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   @reads('first') firstName\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key for the property to read\n ",
      "start": 17686,
      "end": 18226,
      "loc": {
        "start": {
          "line": 547,
          "column": 0
        },
        "end": {
          "line": 564,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 18227,
      "end": 18233,
      "loc": {
        "start": {
          "line": 565,
          "column": 0
        },
        "end": {
          "line": 565,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 18234,
      "end": 18239,
      "loc": {
        "start": {
          "line": 565,
          "column": 7
        },
        "end": {
          "line": 565,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "reads",
      "start": 18240,
      "end": 18245,
      "loc": {
        "start": {
          "line": 565,
          "column": 13
        },
        "end": {
          "line": 565,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 18246,
      "end": 18247,
      "loc": {
        "start": {
          "line": 565,
          "column": 19
        },
        "end": {
          "line": 565,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 18248,
      "end": 18283,
      "loc": {
        "start": {
          "line": 565,
          "column": 21
        },
        "end": {
          "line": 565,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 18283,
      "end": 18284,
      "loc": {
        "start": {
          "line": 565,
          "column": 56
        },
        "end": {
          "line": 565,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 18284,
      "end": 18289,
      "loc": {
        "start": {
          "line": 565,
          "column": 57
        },
        "end": {
          "line": 565,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 18289,
      "end": 18290,
      "loc": {
        "start": {
          "line": 565,
          "column": 62
        },
        "end": {
          "line": 565,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 18290,
      "end": 18298,
      "loc": {
        "start": {
          "line": 565,
          "column": 63
        },
        "end": {
          "line": 565,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 18298,
      "end": 18299,
      "loc": {
        "start": {
          "line": 565,
          "column": 71
        },
        "end": {
          "line": 565,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "reads",
      "start": 18299,
      "end": 18304,
      "loc": {
        "start": {
          "line": 565,
          "column": 72
        },
        "end": {
          "line": 565,
          "column": 77
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 18304,
      "end": 18305,
      "loc": {
        "start": {
          "line": 565,
          "column": 77
        },
        "end": {
          "line": 565,
          "column": 78
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `reads` without parameters",
      "start": 18306,
      "end": 18345,
      "loc": {
        "start": {
          "line": 565,
          "column": 79
        },
        "end": {
          "line": 565,
          "column": 118
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 18345,
      "end": 18346,
      "loc": {
        "start": {
          "line": 565,
          "column": 118
        },
        "end": {
          "line": 565,
          "column": 119
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 18346,
      "end": 18347,
      "loc": {
        "start": {
          "line": 565,
          "column": 119
        },
        "end": {
          "line": 565,
          "column": 120
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.setDiff](http://emberjs.com/api/classes/Ember.computed.html#method_setDiff)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array that are not in the second dependent array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { setDiff } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza']),\n *\n *   @setDiff('likes', 'foods') favoriteThingsThatArentFood // ['puppies']\n * });\n * ```\n *\n * @function\n * @param {String} setAProperty - Keys for the first set\n * @param {String} setBProperty - Keys for the first set\n ",
      "start": 18349,
      "end": 19095,
      "loc": {
        "start": {
          "line": 567,
          "column": 0
        },
        "end": {
          "line": 588,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 19096,
      "end": 19102,
      "loc": {
        "start": {
          "line": 589,
          "column": 0
        },
        "end": {
          "line": 589,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 19103,
      "end": 19108,
      "loc": {
        "start": {
          "line": 589,
          "column": 7
        },
        "end": {
          "line": 589,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "setDiff",
      "start": 19109,
      "end": 19116,
      "loc": {
        "start": {
          "line": 589,
          "column": 13
        },
        "end": {
          "line": 589,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 19117,
      "end": 19118,
      "loc": {
        "start": {
          "line": 589,
          "column": 21
        },
        "end": {
          "line": 589,
          "column": 22
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 19119,
      "end": 19154,
      "loc": {
        "start": {
          "line": 589,
          "column": 23
        },
        "end": {
          "line": 589,
          "column": 58
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 19154,
      "end": 19155,
      "loc": {
        "start": {
          "line": 589,
          "column": 58
        },
        "end": {
          "line": 589,
          "column": 59
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 19155,
      "end": 19160,
      "loc": {
        "start": {
          "line": 589,
          "column": 59
        },
        "end": {
          "line": 589,
          "column": 64
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 19160,
      "end": 19161,
      "loc": {
        "start": {
          "line": 589,
          "column": 64
        },
        "end": {
          "line": 589,
          "column": 65
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 19161,
      "end": 19169,
      "loc": {
        "start": {
          "line": 589,
          "column": 65
        },
        "end": {
          "line": 589,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 19169,
      "end": 19170,
      "loc": {
        "start": {
          "line": 589,
          "column": 73
        },
        "end": {
          "line": 589,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "setDiff",
      "start": 19170,
      "end": 19177,
      "loc": {
        "start": {
          "line": 589,
          "column": 74
        },
        "end": {
          "line": 589,
          "column": 81
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 19177,
      "end": 19178,
      "loc": {
        "start": {
          "line": 589,
          "column": 81
        },
        "end": {
          "line": 589,
          "column": 82
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `setDiff` without parameters",
      "start": 19179,
      "end": 19220,
      "loc": {
        "start": {
          "line": 589,
          "column": 83
        },
        "end": {
          "line": 589,
          "column": 124
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 19220,
      "end": 19221,
      "loc": {
        "start": {
          "line": 589,
          "column": 124
        },
        "end": {
          "line": 589,
          "column": 125
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 19221,
      "end": 19222,
      "loc": {
        "start": {
          "line": 589,
          "column": 125
        },
        "end": {
          "line": 589,
          "column": 126
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.sort](http://emberjs.com/api/classes/Ember.computed.html#method_sort)\n *\n * A computed property which returns a new array with all the properties from\n * the first dependent array sorted based on a property or sort function.\n *\n *\n * The callback method you provide should have the following signature:\n *\n * ```javascript\n * function(itemA, itemB);\n * ```\n * - `itemA` the first item to compare.\n * - `itemB` the second item to compare.\n *\n * This function should return negative number (e.g. `-1`) when `itemA` should\n * come before `itemB`. It should return positive number (e.g. `1`) when\n * `itemA` should come after `itemB`. If the `itemA` and `itemB` are equal this\n * function should return `0`.\n *\n * Therefore, if this function is comparing some numeric values, simple\n * `itemA - itemB` or `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used\n * instead of series of `if`.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sort } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   this.names = Ember.A([{name:'Link'},{name:'Zelda'},{name:'Ganon'},{name:'Navi'}]);\n *   @sort('names', function(a, b){\n *     if (a.name > b.name) {\n *       return 1;\n *     } else if (a.name < b.name) {\n *       return -1;\n *     }\n *\n *     return 0;\n *   }) sortedNames // [{name:'Ganon'},{name:'Link'},{name:'Navi'},{name:'Zelda'}]\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - The key for the array that should be sorted\n * @param {Array<String>|Function(Any, Any): Number} sortDefinition - Sorting function or sort descriptor\n ",
      "start": 19224,
      "end": 20861,
      "loc": {
        "start": {
          "line": 591,
          "column": 0
        },
        "end": {
          "line": 636,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 20862,
      "end": 20868,
      "loc": {
        "start": {
          "line": 637,
          "column": 0
        },
        "end": {
          "line": 637,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 20869,
      "end": 20874,
      "loc": {
        "start": {
          "line": 637,
          "column": 7
        },
        "end": {
          "line": 637,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "sort",
      "start": 20875,
      "end": 20879,
      "loc": {
        "start": {
          "line": 637,
          "column": 13
        },
        "end": {
          "line": 637,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 20880,
      "end": 20881,
      "loc": {
        "start": {
          "line": 637,
          "column": 18
        },
        "end": {
          "line": 637,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 20882,
      "end": 20917,
      "loc": {
        "start": {
          "line": 637,
          "column": 20
        },
        "end": {
          "line": 637,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 20917,
      "end": 20918,
      "loc": {
        "start": {
          "line": 637,
          "column": 55
        },
        "end": {
          "line": 637,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 20918,
      "end": 20923,
      "loc": {
        "start": {
          "line": 637,
          "column": 56
        },
        "end": {
          "line": 637,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 20923,
      "end": 20924,
      "loc": {
        "start": {
          "line": 637,
          "column": 61
        },
        "end": {
          "line": 637,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 20924,
      "end": 20932,
      "loc": {
        "start": {
          "line": 637,
          "column": 62
        },
        "end": {
          "line": 637,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 20932,
      "end": 20933,
      "loc": {
        "start": {
          "line": 637,
          "column": 70
        },
        "end": {
          "line": 637,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "sort",
      "start": 20933,
      "end": 20937,
      "loc": {
        "start": {
          "line": 637,
          "column": 71
        },
        "end": {
          "line": 637,
          "column": 75
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 20937,
      "end": 20938,
      "loc": {
        "start": {
          "line": 637,
          "column": 75
        },
        "end": {
          "line": 637,
          "column": 76
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `sort` without parameters",
      "start": 20939,
      "end": 20977,
      "loc": {
        "start": {
          "line": 637,
          "column": 77
        },
        "end": {
          "line": 637,
          "column": 115
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 20977,
      "end": 20978,
      "loc": {
        "start": {
          "line": 637,
          "column": 115
        },
        "end": {
          "line": 637,
          "column": 116
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 20978,
      "end": 20979,
      "loc": {
        "start": {
          "line": 637,
          "column": 116
        },
        "end": {
          "line": 637,
          "column": 117
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.sum](http://emberjs.com/api/classes/Ember.computed.html#method_sum)\n *\n * A computed property that returns the sum of the value in the dependent\n * array.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { sum } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   values: Ember.A([1, 2, 3]),\n *\n *   @sum('values') total // 6\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to sum up\n ",
      "start": 20981,
      "end": 21489,
      "loc": {
        "start": {
          "line": 639,
          "column": 0
        },
        "end": {
          "line": 658,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 21490,
      "end": 21496,
      "loc": {
        "start": {
          "line": 659,
          "column": 0
        },
        "end": {
          "line": 659,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 21497,
      "end": 21502,
      "loc": {
        "start": {
          "line": 659,
          "column": 7
        },
        "end": {
          "line": 659,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "sum",
      "start": 21503,
      "end": 21506,
      "loc": {
        "start": {
          "line": 659,
          "column": 13
        },
        "end": {
          "line": 659,
          "column": 16
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 21507,
      "end": 21508,
      "loc": {
        "start": {
          "line": 659,
          "column": 17
        },
        "end": {
          "line": 659,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 21509,
      "end": 21544,
      "loc": {
        "start": {
          "line": 659,
          "column": 19
        },
        "end": {
          "line": 659,
          "column": 54
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 21544,
      "end": 21545,
      "loc": {
        "start": {
          "line": 659,
          "column": 54
        },
        "end": {
          "line": 659,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 21545,
      "end": 21550,
      "loc": {
        "start": {
          "line": 659,
          "column": 55
        },
        "end": {
          "line": 659,
          "column": 60
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 21550,
      "end": 21551,
      "loc": {
        "start": {
          "line": 659,
          "column": 60
        },
        "end": {
          "line": 659,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 21551,
      "end": 21559,
      "loc": {
        "start": {
          "line": 659,
          "column": 61
        },
        "end": {
          "line": 659,
          "column": 69
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 21559,
      "end": 21560,
      "loc": {
        "start": {
          "line": 659,
          "column": 69
        },
        "end": {
          "line": 659,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "sum",
      "start": 21560,
      "end": 21563,
      "loc": {
        "start": {
          "line": 659,
          "column": 70
        },
        "end": {
          "line": 659,
          "column": 73
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 21563,
      "end": 21564,
      "loc": {
        "start": {
          "line": 659,
          "column": 73
        },
        "end": {
          "line": 659,
          "column": 74
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `sum` without parameters",
      "start": 21565,
      "end": 21602,
      "loc": {
        "start": {
          "line": 659,
          "column": 75
        },
        "end": {
          "line": 659,
          "column": 112
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 21602,
      "end": 21603,
      "loc": {
        "start": {
          "line": 659,
          "column": 112
        },
        "end": {
          "line": 659,
          "column": 113
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 21603,
      "end": 21604,
      "loc": {
        "start": {
          "line": 659,
          "column": 113
        },
        "end": {
          "line": 659,
          "column": 114
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.union](http://emberjs.com/api/classes/Ember.computed.html#method_union)\n *\n * Alias for [union](http://emberjs.com/api/classes/Ember.computed.html#method_uniq).\n *\n * ```javascript\n * import Ember from 'ember';\n * import { union } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @union('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {...String} dependentKeys - Keys of the arrays to union\n ",
      "start": 21606,
      "end": 22249,
      "loc": {
        "start": {
          "line": 661,
          "column": 0
        },
        "end": {
          "line": 680,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 22250,
      "end": 22256,
      "loc": {
        "start": {
          "line": 681,
          "column": 0
        },
        "end": {
          "line": 681,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 22257,
      "end": 22262,
      "loc": {
        "start": {
          "line": 681,
          "column": 7
        },
        "end": {
          "line": 681,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "union",
      "start": 22263,
      "end": 22268,
      "loc": {
        "start": {
          "line": 681,
          "column": 13
        },
        "end": {
          "line": 681,
          "column": 18
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 22269,
      "end": 22270,
      "loc": {
        "start": {
          "line": 681,
          "column": 19
        },
        "end": {
          "line": 681,
          "column": 20
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 22271,
      "end": 22306,
      "loc": {
        "start": {
          "line": 681,
          "column": 21
        },
        "end": {
          "line": 681,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 22306,
      "end": 22307,
      "loc": {
        "start": {
          "line": 681,
          "column": 56
        },
        "end": {
          "line": 681,
          "column": 57
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 22307,
      "end": 22312,
      "loc": {
        "start": {
          "line": 681,
          "column": 57
        },
        "end": {
          "line": 681,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 22312,
      "end": 22313,
      "loc": {
        "start": {
          "line": 681,
          "column": 62
        },
        "end": {
          "line": 681,
          "column": 63
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 22313,
      "end": 22321,
      "loc": {
        "start": {
          "line": 681,
          "column": 63
        },
        "end": {
          "line": 681,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 22321,
      "end": 22322,
      "loc": {
        "start": {
          "line": 681,
          "column": 71
        },
        "end": {
          "line": 681,
          "column": 72
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "union",
      "start": 22322,
      "end": 22327,
      "loc": {
        "start": {
          "line": 681,
          "column": 72
        },
        "end": {
          "line": 681,
          "column": 77
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 22327,
      "end": 22328,
      "loc": {
        "start": {
          "line": 681,
          "column": 77
        },
        "end": {
          "line": 681,
          "column": 78
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `union` without parameters",
      "start": 22329,
      "end": 22368,
      "loc": {
        "start": {
          "line": 681,
          "column": 79
        },
        "end": {
          "line": 681,
          "column": 118
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 22368,
      "end": 22369,
      "loc": {
        "start": {
          "line": 681,
          "column": 118
        },
        "end": {
          "line": 681,
          "column": 119
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 22369,
      "end": 22370,
      "loc": {
        "start": {
          "line": 681,
          "column": 119
        },
        "end": {
          "line": 681,
          "column": 120
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * Decorator that wraps [Ember.computed.uniq](http://emberjs.com/api/classes/Ember.computed.html#method_uniq)\n *\n * A computed property which returns a new array with all the unique elements from one or more dependent arrays.\n *\n * ```javascript\n * import Ember from 'ember';\n * import { uniq } from 'ember-decorators/computed';\n *\n * export default Ember.Component.extend({\n *   likes: Ember.A([ 'tacos', 'puppies', 'pizza' ]),\n *   foods: Ember.A(['tacos', 'pizza', 'ramen']),\n *\n *   @uniq('likes', 'foods') favorites // ['tacos', 'puppies', 'pizza', 'ramen']\n * });\n * ```\n *\n * @function\n * @param {String} dependentKey - Key of the array to uniq\n ",
      "start": 22372,
      "end": 23031,
      "loc": {
        "start": {
          "line": 683,
          "column": 0
        },
        "end": {
          "line": 702,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "export",
        "keyword": "export",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "export",
      "start": 23032,
      "end": 23038,
      "loc": {
        "start": {
          "line": 703,
          "column": 0
        },
        "end": {
          "line": 703,
          "column": 6
        }
      }
    },
    {
      "type": {
        "label": "const",
        "keyword": "const",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "const",
      "start": 23039,
      "end": 23044,
      "loc": {
        "start": {
          "line": 703,
          "column": 7
        },
        "end": {
          "line": 703,
          "column": 12
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "uniq",
      "start": 23045,
      "end": 23049,
      "loc": {
        "start": {
          "line": 703,
          "column": 13
        },
        "end": {
          "line": 703,
          "column": 17
        }
      }
    },
    {
      "type": {
        "label": "=",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": true,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "=",
      "start": 23050,
      "end": 23051,
      "loc": {
        "start": {
          "line": 703,
          "column": 18
        },
        "end": {
          "line": 703,
          "column": 19
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "decoratedPropertyWithRequiredParams",
      "start": 23052,
      "end": 23087,
      "loc": {
        "start": {
          "line": 703,
          "column": 20
        },
        "end": {
          "line": 703,
          "column": 55
        }
      }
    },
    {
      "type": {
        "label": "(",
        "beforeExpr": true,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 23087,
      "end": 23088,
      "loc": {
        "start": {
          "line": 703,
          "column": 55
        },
        "end": {
          "line": 703,
          "column": 56
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "Ember",
      "start": 23088,
      "end": 23093,
      "loc": {
        "start": {
          "line": 703,
          "column": 56
        },
        "end": {
          "line": 703,
          "column": 61
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 23093,
      "end": 23094,
      "loc": {
        "start": {
          "line": 703,
          "column": 61
        },
        "end": {
          "line": 703,
          "column": 62
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "computed",
      "start": 23094,
      "end": 23102,
      "loc": {
        "start": {
          "line": 703,
          "column": 62
        },
        "end": {
          "line": 703,
          "column": 70
        }
      }
    },
    {
      "type": {
        "label": ".",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 23102,
      "end": 23103,
      "loc": {
        "start": {
          "line": 703,
          "column": 70
        },
        "end": {
          "line": 703,
          "column": 71
        }
      }
    },
    {
      "type": {
        "label": "name",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "value": "uniq",
      "start": 23103,
      "end": 23107,
      "loc": {
        "start": {
          "line": 703,
          "column": 71
        },
        "end": {
          "line": 703,
          "column": 75
        }
      }
    },
    {
      "type": {
        "label": ",",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 23107,
      "end": 23108,
      "loc": {
        "start": {
          "line": 703,
          "column": 75
        },
        "end": {
          "line": 703,
          "column": 76
        }
      }
    },
    {
      "type": {
        "label": "string",
        "beforeExpr": false,
        "startsExpr": true,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "value": "Cannot use `uniq` without parameters",
      "start": 23109,
      "end": 23147,
      "loc": {
        "start": {
          "line": 703,
          "column": 77
        },
        "end": {
          "line": 703,
          "column": 115
        }
      }
    },
    {
      "type": {
        "label": ")",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null
      },
      "start": 23147,
      "end": 23148,
      "loc": {
        "start": {
          "line": 703,
          "column": 115
        },
        "end": {
          "line": 703,
          "column": 116
        }
      }
    },
    {
      "type": {
        "label": ";",
        "beforeExpr": true,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 23148,
      "end": 23149,
      "loc": {
        "start": {
          "line": 703,
          "column": 116
        },
        "end": {
          "line": 703,
          "column": 117
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 23150,
      "end": 23150,
      "loc": {
        "start": {
          "line": 704,
          "column": 0
        },
        "end": {
          "line": 704,
          "column": 0
        }
      }
    }
  ]
}